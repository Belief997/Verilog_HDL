// This file was automatically generated by FIRDesigner software whose author is loywong.
// The file including:
//   ◆  a 58 taps FIR low pass filter module based on Hamming window 
//         and it's normalized (to half Freq_sample) cut off frequency is 0.500.
//   ◆  the CSD multipliers which were invoked by the filter module.
// The original coefficients are:
//     0.000110557423325
//    -0.000024500249889
//    -0.000432393057744
//    -0.001374411754195
//    -0.003010614434166
//    -0.005332575437479
//    -0.008058558112256
//    -0.010595172400516
//    -0.012111002999342
//    -0.011739712280763
//    -0.008882907597142
//    -0.003529082246702
//     0.003527566964218
//     0.010686334008536
//     0.015824906428331
//     0.016854857162845
//     0.012427916037883
//     0.002592279673370
//    -0.010832769544209
//    -0.024348700640492
//    -0.033404275099608
//    -0.033463720701962
//    -0.021267764887901
//     0.004058205727158
//     0.040393505974082
//     0.082743038491024
//     0.124130729054756
//     0.157083365155252
//     0.175340301074251
//     0.175340301074251
//     0.157083365155252
//     0.124130729054756
//     0.082743038491024
//     0.040393505974082
//     0.004058205727158
//    -0.021267764887901
//    -0.033463720701962
//    -0.033404275099608
//    -0.024348700640492
//    -0.010832769544209
//     0.002592279673370
//     0.012427916037883
//     0.016854857162845
//     0.015824906428331
//     0.010686334008536
//     0.003527566964218
//    -0.003529082246702
//    -0.008882907597142
//    -0.011739712280763
//    -0.012111002999342
//    -0.010595172400516
//    -0.008058558112256
//    -0.005332575437479
//    -0.003010614434166
//    -0.001374411754195
//    -0.000432393057744
//    -0.000024500249889
//     0.000110557423325

// CSD Multiplier for Coefficient 0.000110557423325
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p000110557423325
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = 8'b0;
endmodule

// CSD Multiplier for Coefficient 0.000024500249889
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p000024500249889
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = 8'b0;
endmodule

// CSD Multiplier for Coefficient 0.000432393057744
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p000432393057744
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = 8'b0;
endmodule

// CSD Multiplier for Coefficient 0.001374411754195
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p001374411754195
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = 8'b0;
endmodule

// CSD Multiplier for Coefficient 0.003010614434166
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p003010614434166
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = 8'b0;
endmodule

// CSD Multiplier for Coefficient 0.005332575437479
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p005332575437479
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = 8'b0;
endmodule

// CSD Multiplier for Coefficient 0.008058558112256
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p008058558112256
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.010595172400516
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p010595172400516
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.012111002999342
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p012111002999342
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.011739712280763
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p011739712280763
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.008882907597142
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p008882907597142
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.003529082246702
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p003529082246702
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = 8'b0;
endmodule

// CSD Multiplier for Coefficient 0.003527566964218
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p003527566964218
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = 8'b0;
endmodule

// CSD Multiplier for Coefficient 0.010686334008536
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p010686334008536
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.015824906428331
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p015824906428331
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:2], in[7:6]};
endmodule

// CSD Multiplier for Coefficient 0.016854857162845
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p016854857162845
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:2], in[7:6]};
endmodule

// CSD Multiplier for Coefficient 0.012427916037883
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p012427916037883
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.002592279673370
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p002592279673370
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = 8'b0;
endmodule

// CSD Multiplier for Coefficient 0.010832769544209
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p010832769544209
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.024348700640492
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p024348700640492
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:3], in[7:5]} - {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.033404275099608
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p033404275099608
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:3], in[7:5]};
endmodule

// CSD Multiplier for Coefficient 0.033463720701962
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p033463720701962
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:3], in[7:5]};
endmodule

// CSD Multiplier for Coefficient 0.021267764887901
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p021267764887901
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:2], in[7:6]};
endmodule

// CSD Multiplier for Coefficient 0.004058205727158
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p004058205727158
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = 8'b0;
endmodule

// CSD Multiplier for Coefficient 0.040393505974082
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p040393505974082
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:3], in[7:5]} + {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.082743038491024
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p082743038491024
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:4], in[7:4]} + {shiftSign[7:2], in[7:6]};
endmodule

// CSD Multiplier for Coefficient 0.124130729054756
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p124130729054756
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:5], in[7:3]} - {shiftSign[7:1], in[7:7]};
endmodule

// CSD Multiplier for Coefficient 0.157083365155252
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p157083365155252
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:5], in[7:3]} + {shiftSign[7:3], in[7:5]};
endmodule

// CSD Multiplier for Coefficient 0.175340301074251
module FIR_Hamming_58Taps_LP_0d500_CSDMult_p175340301074251
(
    input [7:0] in,
    output [7:0] out
);
    wire [7:0] shiftSign = (in[7] == 1'b0)? 8'b0 : - 8'b1;
    assign out = + {shiftSign[7:6], in[7:2]} - {shiftSign[7:4], in[7:4]} - {shiftSign[7:2], in[7:6]};
endmodule


module FIR_Hamming_58Taps_LP_0d500
(
    input Clock,
    input ClkEn,
    input AsyncRst,
    input signed [7:0] In,
    output reg signed [7:0] Out
);

    reg signed [7:0] delay[56:0];
    wire signed [7:0] prod_0p000110557423325;
    wire signed [7:0] prod_0p000024500249889;
    wire signed [7:0] prod_0p000432393057744;
    wire signed [7:0] prod_0p001374411754195;
    wire signed [7:0] prod_0p003010614434166;
    wire signed [7:0] prod_0p005332575437479;
    wire signed [7:0] prod_0p008058558112256;
    wire signed [7:0] prod_0p010595172400516;
    wire signed [7:0] prod_0p012111002999342;
    wire signed [7:0] prod_0p011739712280763;
    wire signed [7:0] prod_0p008882907597142;
    wire signed [7:0] prod_0p003529082246702;
    wire signed [7:0] prod_0p003527566964218;
    wire signed [7:0] prod_0p010686334008536;
    wire signed [7:0] prod_0p015824906428331;
    wire signed [7:0] prod_0p016854857162845;
    wire signed [7:0] prod_0p012427916037883;
    wire signed [7:0] prod_0p002592279673370;
    wire signed [7:0] prod_0p010832769544209;
    wire signed [7:0] prod_0p024348700640492;
    wire signed [7:0] prod_0p033404275099608;
    wire signed [7:0] prod_0p033463720701962;
    wire signed [7:0] prod_0p021267764887901;
    wire signed [7:0] prod_0p004058205727158;
    wire signed [7:0] prod_0p040393505974082;
    wire signed [7:0] prod_0p082743038491024;
    wire signed [7:0] prod_0p124130729054756;
    wire signed [7:0] prod_0p157083365155252;
    wire signed [7:0] prod_0p175340301074251;

    FIR_Hamming_58Taps_LP_0d500_CSDMult_p000110557423325 mult0p000110557423325(In, prod_0p000110557423325);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p000024500249889 mult0p000024500249889(In, prod_0p000024500249889);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p000432393057744 mult0p000432393057744(In, prod_0p000432393057744);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p001374411754195 mult0p001374411754195(In, prod_0p001374411754195);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p003010614434166 mult0p003010614434166(In, prod_0p003010614434166);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p005332575437479 mult0p005332575437479(In, prod_0p005332575437479);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p008058558112256 mult0p008058558112256(In, prod_0p008058558112256);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p010595172400516 mult0p010595172400516(In, prod_0p010595172400516);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p012111002999342 mult0p012111002999342(In, prod_0p012111002999342);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p011739712280763 mult0p011739712280763(In, prod_0p011739712280763);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p008882907597142 mult0p008882907597142(In, prod_0p008882907597142);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p003529082246702 mult0p003529082246702(In, prod_0p003529082246702);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p003527566964218 mult0p003527566964218(In, prod_0p003527566964218);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p010686334008536 mult0p010686334008536(In, prod_0p010686334008536);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p015824906428331 mult0p015824906428331(In, prod_0p015824906428331);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p016854857162845 mult0p016854857162845(In, prod_0p016854857162845);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p012427916037883 mult0p012427916037883(In, prod_0p012427916037883);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p002592279673370 mult0p002592279673370(In, prod_0p002592279673370);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p010832769544209 mult0p010832769544209(In, prod_0p010832769544209);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p024348700640492 mult0p024348700640492(In, prod_0p024348700640492);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p033404275099608 mult0p033404275099608(In, prod_0p033404275099608);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p033463720701962 mult0p033463720701962(In, prod_0p033463720701962);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p021267764887901 mult0p021267764887901(In, prod_0p021267764887901);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p004058205727158 mult0p004058205727158(In, prod_0p004058205727158);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p040393505974082 mult0p040393505974082(In, prod_0p040393505974082);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p082743038491024 mult0p082743038491024(In, prod_0p082743038491024);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p124130729054756 mult0p124130729054756(In, prod_0p124130729054756);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p157083365155252 mult0p157083365155252(In, prod_0p157083365155252);
    FIR_Hamming_58Taps_LP_0d500_CSDMult_p175340301074251 mult0p175340301074251(In, prod_0p175340301074251);

    always@(posedge Clock or posedge AsyncRst)
    begin
        if(AsyncRst)
        begin
            delay[0] <= 1'b0;
            delay[1] <= 1'b0;
            delay[2] <= 1'b0;
            delay[3] <= 1'b0;
            delay[4] <= 1'b0;
            delay[5] <= 1'b0;
            delay[6] <= 1'b0;
            delay[7] <= 1'b0;
            delay[8] <= 1'b0;
            delay[9] <= 1'b0;
            delay[10] <= 1'b0;
            delay[11] <= 1'b0;
            delay[12] <= 1'b0;
            delay[13] <= 1'b0;
            delay[14] <= 1'b0;
            delay[15] <= 1'b0;
            delay[16] <= 1'b0;
            delay[17] <= 1'b0;
            delay[18] <= 1'b0;
            delay[19] <= 1'b0;
            delay[20] <= 1'b0;
            delay[21] <= 1'b0;
            delay[22] <= 1'b0;
            delay[23] <= 1'b0;
            delay[24] <= 1'b0;
            delay[25] <= 1'b0;
            delay[26] <= 1'b0;
            delay[27] <= 1'b0;
            delay[28] <= 1'b0;
            delay[29] <= 1'b0;
            delay[30] <= 1'b0;
            delay[31] <= 1'b0;
            delay[32] <= 1'b0;
            delay[33] <= 1'b0;
            delay[34] <= 1'b0;
            delay[35] <= 1'b0;
            delay[36] <= 1'b0;
            delay[37] <= 1'b0;
            delay[38] <= 1'b0;
            delay[39] <= 1'b0;
            delay[40] <= 1'b0;
            delay[41] <= 1'b0;
            delay[42] <= 1'b0;
            delay[43] <= 1'b0;
            delay[44] <= 1'b0;
            delay[45] <= 1'b0;
            delay[46] <= 1'b0;
            delay[47] <= 1'b0;
            delay[48] <= 1'b0;
            delay[49] <= 1'b0;
            delay[50] <= 1'b0;
            delay[51] <= 1'b0;
            delay[52] <= 1'b0;
            delay[53] <= 1'b0;
            delay[54] <= 1'b0;
            delay[55] <= 1'b0;
            delay[56] <= 1'b0;
        end
        else if(ClkEn)
        begin
            Out <= delay[0] + prod_0p000110557423325;
            delay[0] <= delay[1] - prod_0p000024500249889;
            delay[1] <= delay[2] - prod_0p000432393057744;
            delay[2] <= delay[3] - prod_0p001374411754195;
            delay[3] <= delay[4] - prod_0p003010614434166;
            delay[4] <= delay[5] - prod_0p005332575437479;
            delay[5] <= delay[6] - prod_0p008058558112256;
            delay[6] <= delay[7] - prod_0p010595172400516;
            delay[7] <= delay[8] - prod_0p012111002999342;
            delay[8] <= delay[9] - prod_0p011739712280763;
            delay[9] <= delay[10] - prod_0p008882907597142;
            delay[10] <= delay[11] - prod_0p003529082246702;
            delay[11] <= delay[12] + prod_0p003527566964218;
            delay[12] <= delay[13] + prod_0p010686334008536;
            delay[13] <= delay[14] + prod_0p015824906428331;
            delay[14] <= delay[15] + prod_0p016854857162845;
            delay[15] <= delay[16] + prod_0p012427916037883;
            delay[16] <= delay[17] + prod_0p002592279673370;
            delay[17] <= delay[18] - prod_0p010832769544209;
            delay[18] <= delay[19] - prod_0p024348700640492;
            delay[19] <= delay[20] - prod_0p033404275099608;
            delay[20] <= delay[21] - prod_0p033463720701962;
            delay[21] <= delay[22] - prod_0p021267764887901;
            delay[22] <= delay[23] + prod_0p004058205727158;
            delay[23] <= delay[24] + prod_0p040393505974082;
            delay[24] <= delay[25] + prod_0p082743038491024;
            delay[25] <= delay[26] + prod_0p124130729054756;
            delay[26] <= delay[27] + prod_0p157083365155252;
            delay[27] <= delay[28] + prod_0p175340301074251;
            delay[28] <= delay[29] + prod_0p175340301074251;
            delay[29] <= delay[30] + prod_0p157083365155252;
            delay[30] <= delay[31] + prod_0p124130729054756;
            delay[31] <= delay[32] + prod_0p082743038491024;
            delay[32] <= delay[33] + prod_0p040393505974082;
            delay[33] <= delay[34] + prod_0p004058205727158;
            delay[34] <= delay[35] - prod_0p021267764887901;
            delay[35] <= delay[36] - prod_0p033463720701962;
            delay[36] <= delay[37] - prod_0p033404275099608;
            delay[37] <= delay[38] - prod_0p024348700640492;
            delay[38] <= delay[39] - prod_0p010832769544209;
            delay[39] <= delay[40] + prod_0p002592279673370;
            delay[40] <= delay[41] + prod_0p012427916037883;
            delay[41] <= delay[42] + prod_0p016854857162845;
            delay[42] <= delay[43] + prod_0p015824906428331;
            delay[43] <= delay[44] + prod_0p010686334008536;
            delay[44] <= delay[45] + prod_0p003527566964218;
            delay[45] <= delay[46] - prod_0p003529082246702;
            delay[46] <= delay[47] - prod_0p008882907597142;
            delay[47] <= delay[48] - prod_0p011739712280763;
            delay[48] <= delay[49] - prod_0p012111002999342;
            delay[49] <= delay[50] - prod_0p010595172400516;
            delay[50] <= delay[51] - prod_0p008058558112256;
            delay[51] <= delay[52] - prod_0p005332575437479;
            delay[52] <= delay[53] - prod_0p003010614434166;
            delay[53] <= delay[54] - prod_0p001374411754195;
            delay[54] <= delay[55] - prod_0p000432393057744;
            delay[55] <= delay[56] - prod_0p000024500249889;
            delay[56] <=  + prod_0p000110557423325;
        end
    end

endmodule

