// This file was automatically generated by FIRDesigner software whose author is loywong.
// The file including:
//   ?  a 102 taps FIR low pass filter module based on Hamming window 
//         and it's normalized (to half Freq_sample) cut off frequency is 0.075.
//   ?  the CSD multipliers which were invoked by the filter module.
// The original coefficients are:
//    -0.000312180157690
//    -0.000408492217218
//    -0.000498011783117
//    -0.000578299538857
//    -0.000644121343107
//    -0.000687280906619
//    -0.000696954765890
//    -0.000660553084528
//    -0.000565071298382
//    -0.000398838280953
//    -0.000153512246986
//     0.000173868420723
//     0.000579000962733
//     0.001048831859663
//     0.001560687841523
//     0.002082210442770
//     0.002572226498984
//     0.002982616179357
//     0.003261157275188
//     0.003355235822047
//     0.003216225889151
//     0.002804262995456
//     0.002093073277563
//     0.001074480501628
//    -0.000237799921444
//    -0.001805453713732
//    -0.003564273439775
//    -0.005424526774583
//    -0.007273135709427
//    -0.008977695349218
//    -0.010392230749296
//    -0.011364458740353
//    -0.011744198614411
//    -0.011392470413372
//    -0.010190740968423
//    -0.008049732765902
//    -0.004917203953719
//    -0.000784141519696
//     0.004311116829450
//     0.010281206882055
//     0.016990743481534
//     0.024260081928030
//     0.031871738143908
//     0.039579199579142
//     0.047117700193336
//     0.054216397598115
//     0.060611288249716
//     0.066058134997489
//     0.070344665177605
//     0.073301328577023
//     0.074809981529674
//     0.074809981529674
//     0.073301328577023
//     0.070344665177605
//     0.066058134997489
//     0.060611288249716
//     0.054216397598115
//     0.047117700193336
//     0.039579199579142
//     0.031871738143908
//     0.024260081928030
//     0.016990743481534
//     0.010281206882055
//     0.004311116829450
//    -0.000784141519696
//    -0.004917203953719
//    -0.008049732765902
//    -0.010190740968423
//    -0.011392470413372
//    -0.011744198614411
//    -0.011364458740353
//    -0.010392230749296
//    -0.008977695349218
//    -0.007273135709427
//    -0.005424526774583
//    -0.003564273439775
//    -0.001805453713732
//    -0.000237799921444
//     0.001074480501628
//     0.002093073277563
//     0.002804262995456
//     0.003216225889151
//     0.003355235822047
//     0.003261157275188
//     0.002982616179357
//     0.002572226498984
//     0.002082210442770
//     0.001560687841523
//     0.001048831859663
//     0.000579000962733
//     0.000173868420723
//    -0.000153512246986
//    -0.000398838280953
//    -0.000565071298382
//    -0.000660553084528
//    -0.000696954765890
//    -0.000687280906619
//    -0.000644121343107
//    -0.000578299538857
//    -0.000498011783117
//    -0.000408492217218
//    -0.000312180157690

// CSD Multiplier for Coefficient 0.000312180157690
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000312180157690
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000408492217218
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000408492217218
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000498011783117
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000498011783117
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.000578299538857
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000578299538857
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.000644121343107
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000644121343107
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.000687280906619
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000687280906619
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.000696954765890
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000696954765890
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.000660553084528
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000660553084528
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.000565071298382
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000565071298382
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.000398838280953
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000398838280953
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000153512246986
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000153512246986
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000173868420723
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000173868420723
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000579000962733
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000579000962733
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.001048831859663
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p001048831859663
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.001560687841523
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p001560687841523
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:3], in[11:9]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.002082210442770
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p002082210442770
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:3], in[11:9]};
endmodule

// CSD Multiplier for Coefficient 0.002572226498984
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p002572226498984
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:3], in[11:9]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.002982616179357
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p002982616179357
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.003261157275188
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p003261157275188
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.003355235822047
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p003355235822047
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.003216225889151
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p003216225889151
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.002804262995456
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p002804262995456
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:3], in[11:9]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.002093073277563
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p002093073277563
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:3], in[11:9]};
endmodule

// CSD Multiplier for Coefficient 0.001074480501628
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p001074480501628
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.000237799921444
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000237799921444
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.001805453713732
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p001805453713732
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:3], in[11:9]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.003564273439775
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p003564273439775
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.005424526774583
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p005424526774583
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} - {shiftSign[11:3], in[11:9]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.007273135709427
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p007273135709427
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.008977695349218
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p008977695349218
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.010392230749296
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p010392230749296
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} + {shiftSign[11:3], in[11:9]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.011364458740353
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p011364458740353
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:4], in[11:8]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.011744198614411
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p011744198614411
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:4], in[11:8]};
endmodule

// CSD Multiplier for Coefficient 0.011392470413372
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p011392470413372
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:4], in[11:8]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.010190740968423
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p010190740968423
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} + {shiftSign[11:3], in[11:9]};
endmodule

// CSD Multiplier for Coefficient 0.008049732765902
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p008049732765902
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]};
endmodule

// CSD Multiplier for Coefficient 0.004917203953719
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p004917203953719
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.000784141519696
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p000784141519696
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.004311116829450
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p004311116829450
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]};
endmodule

// CSD Multiplier for Coefficient 0.010281206882055
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p010281206882055
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} + {shiftSign[11:3], in[11:9]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.016990743481534
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p016990743481534
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.024260081928030
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p024260081928030
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:7], in[11:5]} - {shiftSign[11:5], in[11:7]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.031871738143908
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p031871738143908
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:7], in[11:5]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.039579199579142
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p039579199579142
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:7], in[11:5]} + {shiftSign[11:5], in[11:7]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.047117700193336
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p047117700193336
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:8], in[11:4]} - {shiftSign[11:6], in[11:6]};
endmodule

// CSD Multiplier for Coefficient 0.054216397598115
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p054216397598115
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:8], in[11:4]} - {shiftSign[11:5], in[11:7]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.060611288249716
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p060611288249716
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:8], in[11:4]} - {shiftSign[11:3], in[11:9]};
endmodule

// CSD Multiplier for Coefficient 0.066058134997489
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p066058134997489
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:8], in[11:4]} + {shiftSign[11:4], in[11:8]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.070344665177605
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p070344665177605
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:8], in[11:4]} + {shiftSign[11:5], in[11:7]};
endmodule

// CSD Multiplier for Coefficient 0.073301328577023
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p073301328577023
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = ({shiftSign[11:8], in[11:4]} + {shiftSign[11:6], in[11:6]}) - ({shiftSign[11:4], in[11:8]} + {shiftSign[11:2], in[11:10]});
endmodule

// CSD Multiplier for Coefficient 0.074809981529674
module FIR_Hamming_100Taps_LP_0d075_CSDMult_p074809981529674
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = ({shiftSign[11:8], in[11:4]} + {shiftSign[11:6], in[11:6]}) - ({shiftSign[11:4], in[11:8]} - {shiftSign[11:1], in[11:11]});
endmodule


module FIR_Hamming_100Taps_LP_0d075
(
    input Clock,
    input ClkEn,
    input AsyncRst,
    input signed [11:0] In,
    output reg signed [11:0] Out
);

    reg signed [11:0] delay[100:0];
    wire signed [11:0] prod_0p000312180157690;
    wire signed [11:0] prod_0p000408492217218;
    wire signed [11:0] prod_0p000498011783117;
    wire signed [11:0] prod_0p000578299538857;
    wire signed [11:0] prod_0p000644121343107;
    wire signed [11:0] prod_0p000687280906619;
    wire signed [11:0] prod_0p000696954765890;
    wire signed [11:0] prod_0p000660553084528;
    wire signed [11:0] prod_0p000565071298382;
    wire signed [11:0] prod_0p000398838280953;
    wire signed [11:0] prod_0p000153512246986;
    wire signed [11:0] prod_0p000173868420723;
    wire signed [11:0] prod_0p000579000962733;
    wire signed [11:0] prod_0p001048831859663;
    wire signed [11:0] prod_0p001560687841523;
    wire signed [11:0] prod_0p002082210442770;
    wire signed [11:0] prod_0p002572226498984;
    wire signed [11:0] prod_0p002982616179357;
    wire signed [11:0] prod_0p003261157275188;
    wire signed [11:0] prod_0p003355235822047;
    wire signed [11:0] prod_0p003216225889151;
    wire signed [11:0] prod_0p002804262995456;
    wire signed [11:0] prod_0p002093073277563;
    wire signed [11:0] prod_0p001074480501628;
    wire signed [11:0] prod_0p000237799921444;
    wire signed [11:0] prod_0p001805453713732;
    wire signed [11:0] prod_0p003564273439775;
    wire signed [11:0] prod_0p005424526774583;
    wire signed [11:0] prod_0p007273135709427;
    wire signed [11:0] prod_0p008977695349218;
    wire signed [11:0] prod_0p010392230749296;
    wire signed [11:0] prod_0p011364458740353;
    wire signed [11:0] prod_0p011744198614411;
    wire signed [11:0] prod_0p011392470413372;
    wire signed [11:0] prod_0p010190740968423;
    wire signed [11:0] prod_0p008049732765902;
    wire signed [11:0] prod_0p004917203953719;
    wire signed [11:0] prod_0p000784141519696;
    wire signed [11:0] prod_0p004311116829450;
    wire signed [11:0] prod_0p010281206882055;
    wire signed [11:0] prod_0p016990743481534;
    wire signed [11:0] prod_0p024260081928030;
    wire signed [11:0] prod_0p031871738143908;
    wire signed [11:0] prod_0p039579199579142;
    wire signed [11:0] prod_0p047117700193336;
    wire signed [11:0] prod_0p054216397598115;
    wire signed [11:0] prod_0p060611288249716;
    wire signed [11:0] prod_0p066058134997489;
    wire signed [11:0] prod_0p070344665177605;
    wire signed [11:0] prod_0p073301328577023;
    wire signed [11:0] prod_0p074809981529674;

    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000312180157690 mult0p000312180157690(In, prod_0p000312180157690);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000408492217218 mult0p000408492217218(In, prod_0p000408492217218);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000498011783117 mult0p000498011783117(In, prod_0p000498011783117);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000578299538857 mult0p000578299538857(In, prod_0p000578299538857);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000644121343107 mult0p000644121343107(In, prod_0p000644121343107);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000687280906619 mult0p000687280906619(In, prod_0p000687280906619);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000696954765890 mult0p000696954765890(In, prod_0p000696954765890);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000660553084528 mult0p000660553084528(In, prod_0p000660553084528);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000565071298382 mult0p000565071298382(In, prod_0p000565071298382);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000398838280953 mult0p000398838280953(In, prod_0p000398838280953);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000153512246986 mult0p000153512246986(In, prod_0p000153512246986);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000173868420723 mult0p000173868420723(In, prod_0p000173868420723);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000579000962733 mult0p000579000962733(In, prod_0p000579000962733);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p001048831859663 mult0p001048831859663(In, prod_0p001048831859663);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p001560687841523 mult0p001560687841523(In, prod_0p001560687841523);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p002082210442770 mult0p002082210442770(In, prod_0p002082210442770);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p002572226498984 mult0p002572226498984(In, prod_0p002572226498984);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p002982616179357 mult0p002982616179357(In, prod_0p002982616179357);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p003261157275188 mult0p003261157275188(In, prod_0p003261157275188);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p003355235822047 mult0p003355235822047(In, prod_0p003355235822047);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p003216225889151 mult0p003216225889151(In, prod_0p003216225889151);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p002804262995456 mult0p002804262995456(In, prod_0p002804262995456);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p002093073277563 mult0p002093073277563(In, prod_0p002093073277563);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p001074480501628 mult0p001074480501628(In, prod_0p001074480501628);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000237799921444 mult0p000237799921444(In, prod_0p000237799921444);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p001805453713732 mult0p001805453713732(In, prod_0p001805453713732);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p003564273439775 mult0p003564273439775(In, prod_0p003564273439775);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p005424526774583 mult0p005424526774583(In, prod_0p005424526774583);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p007273135709427 mult0p007273135709427(In, prod_0p007273135709427);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p008977695349218 mult0p008977695349218(In, prod_0p008977695349218);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p010392230749296 mult0p010392230749296(In, prod_0p010392230749296);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p011364458740353 mult0p011364458740353(In, prod_0p011364458740353);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p011744198614411 mult0p011744198614411(In, prod_0p011744198614411);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p011392470413372 mult0p011392470413372(In, prod_0p011392470413372);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p010190740968423 mult0p010190740968423(In, prod_0p010190740968423);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p008049732765902 mult0p008049732765902(In, prod_0p008049732765902);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p004917203953719 mult0p004917203953719(In, prod_0p004917203953719);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p000784141519696 mult0p000784141519696(In, prod_0p000784141519696);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p004311116829450 mult0p004311116829450(In, prod_0p004311116829450);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p010281206882055 mult0p010281206882055(In, prod_0p010281206882055);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p016990743481534 mult0p016990743481534(In, prod_0p016990743481534);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p024260081928030 mult0p024260081928030(In, prod_0p024260081928030);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p031871738143908 mult0p031871738143908(In, prod_0p031871738143908);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p039579199579142 mult0p039579199579142(In, prod_0p039579199579142);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p047117700193336 mult0p047117700193336(In, prod_0p047117700193336);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p054216397598115 mult0p054216397598115(In, prod_0p054216397598115);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p060611288249716 mult0p060611288249716(In, prod_0p060611288249716);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p066058134997489 mult0p066058134997489(In, prod_0p066058134997489);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p070344665177605 mult0p070344665177605(In, prod_0p070344665177605);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p073301328577023 mult0p073301328577023(In, prod_0p073301328577023);
    FIR_Hamming_100Taps_LP_0d075_CSDMult_p074809981529674 mult0p074809981529674(In, prod_0p074809981529674);

    always@(posedge Clock or posedge AsyncRst)
    begin
        if(AsyncRst)
        begin
            delay[0] <= 1'b0;
            delay[1] <= 1'b0;
            delay[2] <= 1'b0;
            delay[3] <= 1'b0;
            delay[4] <= 1'b0;
            delay[5] <= 1'b0;
            delay[6] <= 1'b0;
            delay[7] <= 1'b0;
            delay[8] <= 1'b0;
            delay[9] <= 1'b0;
            delay[10] <= 1'b0;
            delay[11] <= 1'b0;
            delay[12] <= 1'b0;
            delay[13] <= 1'b0;
            delay[14] <= 1'b0;
            delay[15] <= 1'b0;
            delay[16] <= 1'b0;
            delay[17] <= 1'b0;
            delay[18] <= 1'b0;
            delay[19] <= 1'b0;
            delay[20] <= 1'b0;
            delay[21] <= 1'b0;
            delay[22] <= 1'b0;
            delay[23] <= 1'b0;
            delay[24] <= 1'b0;
            delay[25] <= 1'b0;
            delay[26] <= 1'b0;
            delay[27] <= 1'b0;
            delay[28] <= 1'b0;
            delay[29] <= 1'b0;
            delay[30] <= 1'b0;
            delay[31] <= 1'b0;
            delay[32] <= 1'b0;
            delay[33] <= 1'b0;
            delay[34] <= 1'b0;
            delay[35] <= 1'b0;
            delay[36] <= 1'b0;
            delay[37] <= 1'b0;
            delay[38] <= 1'b0;
            delay[39] <= 1'b0;
            delay[40] <= 1'b0;
            delay[41] <= 1'b0;
            delay[42] <= 1'b0;
            delay[43] <= 1'b0;
            delay[44] <= 1'b0;
            delay[45] <= 1'b0;
            delay[46] <= 1'b0;
            delay[47] <= 1'b0;
            delay[48] <= 1'b0;
            delay[49] <= 1'b0;
            delay[50] <= 1'b0;
            delay[51] <= 1'b0;
            delay[52] <= 1'b0;
            delay[53] <= 1'b0;
            delay[54] <= 1'b0;
            delay[55] <= 1'b0;
            delay[56] <= 1'b0;
            delay[57] <= 1'b0;
            delay[58] <= 1'b0;
            delay[59] <= 1'b0;
            delay[60] <= 1'b0;
            delay[61] <= 1'b0;
            delay[62] <= 1'b0;
            delay[63] <= 1'b0;
            delay[64] <= 1'b0;
            delay[65] <= 1'b0;
            delay[66] <= 1'b0;
            delay[67] <= 1'b0;
            delay[68] <= 1'b0;
            delay[69] <= 1'b0;
            delay[70] <= 1'b0;
            delay[71] <= 1'b0;
            delay[72] <= 1'b0;
            delay[73] <= 1'b0;
            delay[74] <= 1'b0;
            delay[75] <= 1'b0;
            delay[76] <= 1'b0;
            delay[77] <= 1'b0;
            delay[78] <= 1'b0;
            delay[79] <= 1'b0;
            delay[80] <= 1'b0;
            delay[81] <= 1'b0;
            delay[82] <= 1'b0;
            delay[83] <= 1'b0;
            delay[84] <= 1'b0;
            delay[85] <= 1'b0;
            delay[86] <= 1'b0;
            delay[87] <= 1'b0;
            delay[88] <= 1'b0;
            delay[89] <= 1'b0;
            delay[90] <= 1'b0;
            delay[91] <= 1'b0;
            delay[92] <= 1'b0;
            delay[93] <= 1'b0;
            delay[94] <= 1'b0;
            delay[95] <= 1'b0;
            delay[96] <= 1'b0;
            delay[97] <= 1'b0;
            delay[98] <= 1'b0;
            delay[99] <= 1'b0;
            delay[100] <= 1'b0;
        end
        else if(ClkEn)
        begin
            Out <= delay[0] - prod_0p000312180157690;
            delay[0] <= delay[1] - prod_0p000408492217218;
            delay[1] <= delay[2] - prod_0p000498011783117;
            delay[2] <= delay[3] - prod_0p000578299538857;
            delay[3] <= delay[4] - prod_0p000644121343107;
            delay[4] <= delay[5] - prod_0p000687280906619;
            delay[5] <= delay[6] - prod_0p000696954765890;
            delay[6] <= delay[7] - prod_0p000660553084528;
            delay[7] <= delay[8] - prod_0p000565071298382;
            delay[8] <= delay[9] - prod_0p000398838280953;
            delay[9] <= delay[10] - prod_0p000153512246986;
            delay[10] <= delay[11] + prod_0p000173868420723;
            delay[11] <= delay[12] + prod_0p000579000962733;
            delay[12] <= delay[13] + prod_0p001048831859663;
            delay[13] <= delay[14] + prod_0p001560687841523;
            delay[14] <= delay[15] + prod_0p002082210442770;
            delay[15] <= delay[16] + prod_0p002572226498984;
            delay[16] <= delay[17] + prod_0p002982616179357;
            delay[17] <= delay[18] + prod_0p003261157275188;
            delay[18] <= delay[19] + prod_0p003355235822047;
            delay[19] <= delay[20] + prod_0p003216225889151;
            delay[20] <= delay[21] + prod_0p002804262995456;
            delay[21] <= delay[22] + prod_0p002093073277563;
            delay[22] <= delay[23] + prod_0p001074480501628;
            delay[23] <= delay[24] - prod_0p000237799921444;
            delay[24] <= delay[25] - prod_0p001805453713732;
            delay[25] <= delay[26] - prod_0p003564273439775;
            delay[26] <= delay[27] - prod_0p005424526774583;
            delay[27] <= delay[28] - prod_0p007273135709427;
            delay[28] <= delay[29] - prod_0p008977695349218;
            delay[29] <= delay[30] - prod_0p010392230749296;
            delay[30] <= delay[31] - prod_0p011364458740353;
            delay[31] <= delay[32] - prod_0p011744198614411;
            delay[32] <= delay[33] - prod_0p011392470413372;
            delay[33] <= delay[34] - prod_0p010190740968423;
            delay[34] <= delay[35] - prod_0p008049732765902;
            delay[35] <= delay[36] - prod_0p004917203953719;
            delay[36] <= delay[37] - prod_0p000784141519696;
            delay[37] <= delay[38] + prod_0p004311116829450;
            delay[38] <= delay[39] + prod_0p010281206882055;
            delay[39] <= delay[40] + prod_0p016990743481534;
            delay[40] <= delay[41] + prod_0p024260081928030;
            delay[41] <= delay[42] + prod_0p031871738143908;
            delay[42] <= delay[43] + prod_0p039579199579142;
            delay[43] <= delay[44] + prod_0p047117700193336;
            delay[44] <= delay[45] + prod_0p054216397598115;
            delay[45] <= delay[46] + prod_0p060611288249716;
            delay[46] <= delay[47] + prod_0p066058134997489;
            delay[47] <= delay[48] + prod_0p070344665177605;
            delay[48] <= delay[49] + prod_0p073301328577023;
            delay[49] <= delay[50] + prod_0p074809981529674;
            delay[50] <= delay[51] + prod_0p074809981529674;
            delay[51] <= delay[52] + prod_0p073301328577023;
            delay[52] <= delay[53] + prod_0p070344665177605;
            delay[53] <= delay[54] + prod_0p066058134997489;
            delay[54] <= delay[55] + prod_0p060611288249716;
            delay[55] <= delay[56] + prod_0p054216397598115;
            delay[56] <= delay[57] + prod_0p047117700193336;
            delay[57] <= delay[58] + prod_0p039579199579142;
            delay[58] <= delay[59] + prod_0p031871738143908;
            delay[59] <= delay[60] + prod_0p024260081928030;
            delay[60] <= delay[61] + prod_0p016990743481534;
            delay[61] <= delay[62] + prod_0p010281206882055;
            delay[62] <= delay[63] + prod_0p004311116829450;
            delay[63] <= delay[64] - prod_0p000784141519696;
            delay[64] <= delay[65] - prod_0p004917203953719;
            delay[65] <= delay[66] - prod_0p008049732765902;
            delay[66] <= delay[67] - prod_0p010190740968423;
            delay[67] <= delay[68] - prod_0p011392470413372;
            delay[68] <= delay[69] - prod_0p011744198614411;
            delay[69] <= delay[70] - prod_0p011364458740353;
            delay[70] <= delay[71] - prod_0p010392230749296;
            delay[71] <= delay[72] - prod_0p008977695349218;
            delay[72] <= delay[73] - prod_0p007273135709427;
            delay[73] <= delay[74] - prod_0p005424526774583;
            delay[74] <= delay[75] - prod_0p003564273439775;
            delay[75] <= delay[76] - prod_0p001805453713732;
            delay[76] <= delay[77] - prod_0p000237799921444;
            delay[77] <= delay[78] + prod_0p001074480501628;
            delay[78] <= delay[79] + prod_0p002093073277563;
            delay[79] <= delay[80] + prod_0p002804262995456;
            delay[80] <= delay[81] + prod_0p003216225889151;
            delay[81] <= delay[82] + prod_0p003355235822047;
            delay[82] <= delay[83] + prod_0p003261157275188;
            delay[83] <= delay[84] + prod_0p002982616179357;
            delay[84] <= delay[85] + prod_0p002572226498984;
            delay[85] <= delay[86] + prod_0p002082210442770;
            delay[86] <= delay[87] + prod_0p001560687841523;
            delay[87] <= delay[88] + prod_0p001048831859663;
            delay[88] <= delay[89] + prod_0p000579000962733;
            delay[89] <= delay[90] + prod_0p000173868420723;
            delay[90] <= delay[91] - prod_0p000153512246986;
            delay[91] <= delay[92] - prod_0p000398838280953;
            delay[92] <= delay[93] - prod_0p000565071298382;
            delay[93] <= delay[94] - prod_0p000660553084528;
            delay[94] <= delay[95] - prod_0p000696954765890;
            delay[95] <= delay[96] - prod_0p000687280906619;
            delay[96] <= delay[97] - prod_0p000644121343107;
            delay[97] <= delay[98] - prod_0p000578299538857;
            delay[98] <= delay[99] - prod_0p000498011783117;
            delay[99] <= delay[100] - prod_0p000408492217218;
            delay[100] <=  - prod_0p000312180157690;
        end
    end

endmodule


