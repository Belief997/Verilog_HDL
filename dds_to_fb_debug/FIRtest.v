// This file was automatically generated by FIRDesigner software whose author is loywong.
// The file including:
//   ?  a 102 taps FIR low pass filter module based on Hamming window 
//         and it's normalized (to half Freq_sample) cut off frequency is 0.02.
//   ?  the CSD multipliers which were invoked by the filter module.
// The original coefficients are:
//    -0.000015838978451
//     0.000016338690936
//     0.000051607555144
//     0.000092238312301
//     0.000140619129891
//     0.000199225120333
//     0.000270585774593
//     0.000357250745826
//     0.000461754402763
//     0.000586579595082
//     0.000734121089916
//     0.000906649149747
//     0.001106273726935
//     0.001334909748964
//     0.001594243961096
//     0.001885703779546
//     0.002210428588641
//     0.002569243889922
//     0.002962638680102
//     0.003390746398472
//     0.003853329743345
//     0.004349769611730
//     0.004879058367434
//     0.005439797590611
//     0.006030200407157
//     0.006648098440041
//     0.007290953367230
//     0.007955873013229
//     0.008639631844000
//     0.009338695679029
//     0.010049250380228
//     0.010767234225885
//     0.011488373629809
//     0.012208221821634
//     0.012922200064683
//     0.013625640953271
//     0.014313833302428
//     0.014982068119995
//     0.015625685134393
//     0.016240119341168
//     0.016820947027910
//     0.017363930740399
//     0.017865062662823
//     0.018320605901465
//     0.018727133184346
//     0.019081562518427
//     0.019381189381008
//     0.019623715062251
//     0.019807270820977
//     0.019930437565362
//     0.019992260823290
//     0.019992260823290
//     0.019930437565362
//     0.019807270820977
//     0.019623715062251
//     0.019381189381008
//     0.019081562518427
//     0.018727133184346
//     0.018320605901465
//     0.017865062662823
//     0.017363930740399
//     0.016820947027910
//     0.016240119341168
//     0.015625685134393
//     0.014982068119995
//     0.014313833302428
//     0.013625640953271
//     0.012922200064683
//     0.012208221821634
//     0.011488373629809
//     0.010767234225885
//     0.010049250380228
//     0.009338695679029
//     0.008639631844000
//     0.007955873013229
//     0.007290953367230
//     0.006648098440041
//     0.006030200407157
//     0.005439797590611
//     0.004879058367434
//     0.004349769611730
//     0.003853329743345
//     0.003390746398472
//     0.002962638680102
//     0.002569243889922
//     0.002210428588641
//     0.001885703779546
//     0.001594243961096
//     0.001334909748964
//     0.001106273726935
//     0.000906649149747
//     0.000734121089916
//     0.000586579595082
//     0.000461754402763
//     0.000357250745826
//     0.000270585774593
//     0.000199225120333
//     0.000140619129891
//     0.000092238312301
//     0.000051607555144
//     0.000016338690936
//    -0.000015838978451

// CSD Multiplier for Coefficient 0.000015838978451
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000015838978451
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000016338690936
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000016338690936
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000051607555144
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000051607555144
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000092238312301
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000092238312301
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000140619129891
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000140619129891
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000199225120333
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000199225120333
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000270585774593
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000270585774593
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000357250745826
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000357250745826
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000461754402763
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000461754402763
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000586579595082
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000586579595082
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.000734121089916
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000734121089916
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.000906649149747
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p000906649149747
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.001106273726935
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p001106273726935
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.001334909748964
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p001334909748964
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.001594243961096
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p001594243961096
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:3], in[11:9]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.001885703779546
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p001885703779546
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:3], in[11:9]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.002210428588641
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p002210428588641
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:3], in[11:9]};
endmodule

// CSD Multiplier for Coefficient 0.002569243889922
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p002569243889922
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:3], in[11:9]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.002962638680102
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p002962638680102
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.003390746398472
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p003390746398472
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.003853329743345
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p003853329743345
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.004349769611730
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p004349769611730
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]};
endmodule

// CSD Multiplier for Coefficient 0.004879058367434
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p004879058367434
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.005439797590611
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p005439797590611
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} - {shiftSign[11:3], in[11:9]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.006030200407157
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p006030200407157
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} - {shiftSign[11:3], in[11:9]};
endmodule

// CSD Multiplier for Coefficient 0.006648098440041
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p006648098440041
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} - {shiftSign[11:3], in[11:9]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.007290953367230
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p007290953367230
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.007955873013229
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p007955873013229
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]};
endmodule

// CSD Multiplier for Coefficient 0.008639631844000
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p008639631844000
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.009338695679029
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p009338695679029
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} + {shiftSign[11:3], in[11:9]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.010049250380228
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p010049250380228
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:5], in[11:7]} + {shiftSign[11:3], in[11:9]};
endmodule

// CSD Multiplier for Coefficient 0.010767234225885
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p010767234225885
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:4], in[11:8]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.011488373629809
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p011488373629809
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:4], in[11:8]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.012208221821634
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p012208221821634
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:4], in[11:8]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.012922200064683
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p012922200064683
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:4], in[11:8]} + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.013625640953271
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p013625640953271
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:3], in[11:9]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.014313833302428
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p014313833302428
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:3], in[11:9]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.014982068119995
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p014982068119995
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.015625685134393
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p015625685134393
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]};
endmodule

// CSD Multiplier for Coefficient 0.016240119341168
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p016240119341168
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.016820947027910
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p016820947027910
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.017363930740399
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p017363930740399
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:3], in[11:9]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.017865062662823
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p017865062662823
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:3], in[11:9]};
endmodule

// CSD Multiplier for Coefficient 0.018320605901465
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p018320605901465
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:3], in[11:9]} + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.018727133184346
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p018727133184346
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:4], in[11:8]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.019081562518427
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p019081562518427
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:4], in[11:8]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.019381189381008
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p019381189381008
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:4], in[11:8]} - {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.019623715062251
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p019623715062251
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:4], in[11:8]};
endmodule

// CSD Multiplier for Coefficient 0.019807270820977
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p019807270820977
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:4], in[11:8]};
endmodule

// CSD Multiplier for Coefficient 0.019930437565362
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p019930437565362
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:4], in[11:8]};
endmodule

// CSD Multiplier for Coefficient 0.019992260823290
module FIR_Hamming_100Taps_LP_0d020_CSDMult_p019992260823290
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:4], in[11:8]};
endmodule


module FIR_Hamming_100Taps_LP_0d020
(
    input Clock,
    input ClkEn,
    input AsyncRst,
    input signed [11:0] In,
    output reg signed [11:0] Out
);

    reg signed [11:0] delay[100:0];
    wire signed [11:0] prod_0p000015838978451;
    wire signed [11:0] prod_0p000016338690936;
    wire signed [11:0] prod_0p000051607555144;
    wire signed [11:0] prod_0p000092238312301;
    wire signed [11:0] prod_0p000140619129891;
    wire signed [11:0] prod_0p000199225120333;
    wire signed [11:0] prod_0p000270585774593;
    wire signed [11:0] prod_0p000357250745826;
    wire signed [11:0] prod_0p000461754402763;
    wire signed [11:0] prod_0p000586579595082;
    wire signed [11:0] prod_0p000734121089916;
    wire signed [11:0] prod_0p000906649149747;
    wire signed [11:0] prod_0p001106273726935;
    wire signed [11:0] prod_0p001334909748964;
    wire signed [11:0] prod_0p001594243961096;
    wire signed [11:0] prod_0p001885703779546;
    wire signed [11:0] prod_0p002210428588641;
    wire signed [11:0] prod_0p002569243889922;
    wire signed [11:0] prod_0p002962638680102;
    wire signed [11:0] prod_0p003390746398472;
    wire signed [11:0] prod_0p003853329743345;
    wire signed [11:0] prod_0p004349769611730;
    wire signed [11:0] prod_0p004879058367434;
    wire signed [11:0] prod_0p005439797590611;
    wire signed [11:0] prod_0p006030200407157;
    wire signed [11:0] prod_0p006648098440041;
    wire signed [11:0] prod_0p007290953367230;
    wire signed [11:0] prod_0p007955873013229;
    wire signed [11:0] prod_0p008639631844000;
    wire signed [11:0] prod_0p009338695679029;
    wire signed [11:0] prod_0p010049250380228;
    wire signed [11:0] prod_0p010767234225885;
    wire signed [11:0] prod_0p011488373629809;
    wire signed [11:0] prod_0p012208221821634;
    wire signed [11:0] prod_0p012922200064683;
    wire signed [11:0] prod_0p013625640953271;
    wire signed [11:0] prod_0p014313833302428;
    wire signed [11:0] prod_0p014982068119995;
    wire signed [11:0] prod_0p015625685134393;
    wire signed [11:0] prod_0p016240119341168;
    wire signed [11:0] prod_0p016820947027910;
    wire signed [11:0] prod_0p017363930740399;
    wire signed [11:0] prod_0p017865062662823;
    wire signed [11:0] prod_0p018320605901465;
    wire signed [11:0] prod_0p018727133184346;
    wire signed [11:0] prod_0p019081562518427;
    wire signed [11:0] prod_0p019381189381008;
    wire signed [11:0] prod_0p019623715062251;
    wire signed [11:0] prod_0p019807270820977;
    wire signed [11:0] prod_0p019930437565362;
    wire signed [11:0] prod_0p019992260823290;

    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000015838978451 mult0p000015838978451(In, prod_0p000015838978451);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000016338690936 mult0p000016338690936(In, prod_0p000016338690936);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000051607555144 mult0p000051607555144(In, prod_0p000051607555144);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000092238312301 mult0p000092238312301(In, prod_0p000092238312301);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000140619129891 mult0p000140619129891(In, prod_0p000140619129891);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000199225120333 mult0p000199225120333(In, prod_0p000199225120333);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000270585774593 mult0p000270585774593(In, prod_0p000270585774593);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000357250745826 mult0p000357250745826(In, prod_0p000357250745826);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000461754402763 mult0p000461754402763(In, prod_0p000461754402763);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000586579595082 mult0p000586579595082(In, prod_0p000586579595082);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000734121089916 mult0p000734121089916(In, prod_0p000734121089916);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p000906649149747 mult0p000906649149747(In, prod_0p000906649149747);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p001106273726935 mult0p001106273726935(In, prod_0p001106273726935);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p001334909748964 mult0p001334909748964(In, prod_0p001334909748964);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p001594243961096 mult0p001594243961096(In, prod_0p001594243961096);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p001885703779546 mult0p001885703779546(In, prod_0p001885703779546);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p002210428588641 mult0p002210428588641(In, prod_0p002210428588641);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p002569243889922 mult0p002569243889922(In, prod_0p002569243889922);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p002962638680102 mult0p002962638680102(In, prod_0p002962638680102);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p003390746398472 mult0p003390746398472(In, prod_0p003390746398472);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p003853329743345 mult0p003853329743345(In, prod_0p003853329743345);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p004349769611730 mult0p004349769611730(In, prod_0p004349769611730);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p004879058367434 mult0p004879058367434(In, prod_0p004879058367434);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p005439797590611 mult0p005439797590611(In, prod_0p005439797590611);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p006030200407157 mult0p006030200407157(In, prod_0p006030200407157);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p006648098440041 mult0p006648098440041(In, prod_0p006648098440041);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p007290953367230 mult0p007290953367230(In, prod_0p007290953367230);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p007955873013229 mult0p007955873013229(In, prod_0p007955873013229);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p008639631844000 mult0p008639631844000(In, prod_0p008639631844000);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p009338695679029 mult0p009338695679029(In, prod_0p009338695679029);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p010049250380228 mult0p010049250380228(In, prod_0p010049250380228);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p010767234225885 mult0p010767234225885(In, prod_0p010767234225885);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p011488373629809 mult0p011488373629809(In, prod_0p011488373629809);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p012208221821634 mult0p012208221821634(In, prod_0p012208221821634);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p012922200064683 mult0p012922200064683(In, prod_0p012922200064683);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p013625640953271 mult0p013625640953271(In, prod_0p013625640953271);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p014313833302428 mult0p014313833302428(In, prod_0p014313833302428);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p014982068119995 mult0p014982068119995(In, prod_0p014982068119995);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p015625685134393 mult0p015625685134393(In, prod_0p015625685134393);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p016240119341168 mult0p016240119341168(In, prod_0p016240119341168);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p016820947027910 mult0p016820947027910(In, prod_0p016820947027910);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p017363930740399 mult0p017363930740399(In, prod_0p017363930740399);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p017865062662823 mult0p017865062662823(In, prod_0p017865062662823);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p018320605901465 mult0p018320605901465(In, prod_0p018320605901465);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p018727133184346 mult0p018727133184346(In, prod_0p018727133184346);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p019081562518427 mult0p019081562518427(In, prod_0p019081562518427);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p019381189381008 mult0p019381189381008(In, prod_0p019381189381008);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p019623715062251 mult0p019623715062251(In, prod_0p019623715062251);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p019807270820977 mult0p019807270820977(In, prod_0p019807270820977);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p019930437565362 mult0p019930437565362(In, prod_0p019930437565362);
    FIR_Hamming_100Taps_LP_0d020_CSDMult_p019992260823290 mult0p019992260823290(In, prod_0p019992260823290);

    always@(posedge Clock or posedge AsyncRst)
    begin
        if(AsyncRst)
        begin
            delay[0] <= 1'b0;
            delay[1] <= 1'b0;
            delay[2] <= 1'b0;
            delay[3] <= 1'b0;
            delay[4] <= 1'b0;
            delay[5] <= 1'b0;
            delay[6] <= 1'b0;
            delay[7] <= 1'b0;
            delay[8] <= 1'b0;
            delay[9] <= 1'b0;
            delay[10] <= 1'b0;
            delay[11] <= 1'b0;
            delay[12] <= 1'b0;
            delay[13] <= 1'b0;
            delay[14] <= 1'b0;
            delay[15] <= 1'b0;
            delay[16] <= 1'b0;
            delay[17] <= 1'b0;
            delay[18] <= 1'b0;
            delay[19] <= 1'b0;
            delay[20] <= 1'b0;
            delay[21] <= 1'b0;
            delay[22] <= 1'b0;
            delay[23] <= 1'b0;
            delay[24] <= 1'b0;
            delay[25] <= 1'b0;
            delay[26] <= 1'b0;
            delay[27] <= 1'b0;
            delay[28] <= 1'b0;
            delay[29] <= 1'b0;
            delay[30] <= 1'b0;
            delay[31] <= 1'b0;
            delay[32] <= 1'b0;
            delay[33] <= 1'b0;
            delay[34] <= 1'b0;
            delay[35] <= 1'b0;
            delay[36] <= 1'b0;
            delay[37] <= 1'b0;
            delay[38] <= 1'b0;
            delay[39] <= 1'b0;
            delay[40] <= 1'b0;
            delay[41] <= 1'b0;
            delay[42] <= 1'b0;
            delay[43] <= 1'b0;
            delay[44] <= 1'b0;
            delay[45] <= 1'b0;
            delay[46] <= 1'b0;
            delay[47] <= 1'b0;
            delay[48] <= 1'b0;
            delay[49] <= 1'b0;
            delay[50] <= 1'b0;
            delay[51] <= 1'b0;
            delay[52] <= 1'b0;
            delay[53] <= 1'b0;
            delay[54] <= 1'b0;
            delay[55] <= 1'b0;
            delay[56] <= 1'b0;
            delay[57] <= 1'b0;
            delay[58] <= 1'b0;
            delay[59] <= 1'b0;
            delay[60] <= 1'b0;
            delay[61] <= 1'b0;
            delay[62] <= 1'b0;
            delay[63] <= 1'b0;
            delay[64] <= 1'b0;
            delay[65] <= 1'b0;
            delay[66] <= 1'b0;
            delay[67] <= 1'b0;
            delay[68] <= 1'b0;
            delay[69] <= 1'b0;
            delay[70] <= 1'b0;
            delay[71] <= 1'b0;
            delay[72] <= 1'b0;
            delay[73] <= 1'b0;
            delay[74] <= 1'b0;
            delay[75] <= 1'b0;
            delay[76] <= 1'b0;
            delay[77] <= 1'b0;
            delay[78] <= 1'b0;
            delay[79] <= 1'b0;
            delay[80] <= 1'b0;
            delay[81] <= 1'b0;
            delay[82] <= 1'b0;
            delay[83] <= 1'b0;
            delay[84] <= 1'b0;
            delay[85] <= 1'b0;
            delay[86] <= 1'b0;
            delay[87] <= 1'b0;
            delay[88] <= 1'b0;
            delay[89] <= 1'b0;
            delay[90] <= 1'b0;
            delay[91] <= 1'b0;
            delay[92] <= 1'b0;
            delay[93] <= 1'b0;
            delay[94] <= 1'b0;
            delay[95] <= 1'b0;
            delay[96] <= 1'b0;
            delay[97] <= 1'b0;
            delay[98] <= 1'b0;
            delay[99] <= 1'b0;
            delay[100] <= 1'b0;
        end
        else if(ClkEn)
        begin
            Out <= delay[0] - prod_0p000015838978451;
            delay[0] <= delay[1] + prod_0p000016338690936;
            delay[1] <= delay[2] + prod_0p000051607555144;
            delay[2] <= delay[3] + prod_0p000092238312301;
            delay[3] <= delay[4] + prod_0p000140619129891;
            delay[4] <= delay[5] + prod_0p000199225120333;
            delay[5] <= delay[6] + prod_0p000270585774593;
            delay[6] <= delay[7] + prod_0p000357250745826;
            delay[7] <= delay[8] + prod_0p000461754402763;
            delay[8] <= delay[9] + prod_0p000586579595082;
            delay[9] <= delay[10] + prod_0p000734121089916;
            delay[10] <= delay[11] + prod_0p000906649149747;
            delay[11] <= delay[12] + prod_0p001106273726935;
            delay[12] <= delay[13] + prod_0p001334909748964;
            delay[13] <= delay[14] + prod_0p001594243961096;
            delay[14] <= delay[15] + prod_0p001885703779546;
            delay[15] <= delay[16] + prod_0p002210428588641;
            delay[16] <= delay[17] + prod_0p002569243889922;
            delay[17] <= delay[18] + prod_0p002962638680102;
            delay[18] <= delay[19] + prod_0p003390746398472;
            delay[19] <= delay[20] + prod_0p003853329743345;
            delay[20] <= delay[21] + prod_0p004349769611730;
            delay[21] <= delay[22] + prod_0p004879058367434;
            delay[22] <= delay[23] + prod_0p005439797590611;
            delay[23] <= delay[24] + prod_0p006030200407157;
            delay[24] <= delay[25] + prod_0p006648098440041;
            delay[25] <= delay[26] + prod_0p007290953367230;
            delay[26] <= delay[27] + prod_0p007955873013229;
            delay[27] <= delay[28] + prod_0p008639631844000;
            delay[28] <= delay[29] + prod_0p009338695679029;
            delay[29] <= delay[30] + prod_0p010049250380228;
            delay[30] <= delay[31] + prod_0p010767234225885;
            delay[31] <= delay[32] + prod_0p011488373629809;
            delay[32] <= delay[33] + prod_0p012208221821634;
            delay[33] <= delay[34] + prod_0p012922200064683;
            delay[34] <= delay[35] + prod_0p013625640953271;
            delay[35] <= delay[36] + prod_0p014313833302428;
            delay[36] <= delay[37] + prod_0p014982068119995;
            delay[37] <= delay[38] + prod_0p015625685134393;
            delay[38] <= delay[39] + prod_0p016240119341168;
            delay[39] <= delay[40] + prod_0p016820947027910;
            delay[40] <= delay[41] + prod_0p017363930740399;
            delay[41] <= delay[42] + prod_0p017865062662823;
            delay[42] <= delay[43] + prod_0p018320605901465;
            delay[43] <= delay[44] + prod_0p018727133184346;
            delay[44] <= delay[45] + prod_0p019081562518427;
            delay[45] <= delay[46] + prod_0p019381189381008;
            delay[46] <= delay[47] + prod_0p019623715062251;
            delay[47] <= delay[48] + prod_0p019807270820977;
            delay[48] <= delay[49] + prod_0p019930437565362;
            delay[49] <= delay[50] + prod_0p019992260823290;
            delay[50] <= delay[51] + prod_0p019992260823290;
            delay[51] <= delay[52] + prod_0p019930437565362;
            delay[52] <= delay[53] + prod_0p019807270820977;
            delay[53] <= delay[54] + prod_0p019623715062251;
            delay[54] <= delay[55] + prod_0p019381189381008;
            delay[55] <= delay[56] + prod_0p019081562518427;
            delay[56] <= delay[57] + prod_0p018727133184346;
            delay[57] <= delay[58] + prod_0p018320605901465;
            delay[58] <= delay[59] + prod_0p017865062662823;
            delay[59] <= delay[60] + prod_0p017363930740399;
            delay[60] <= delay[61] + prod_0p016820947027910;
            delay[61] <= delay[62] + prod_0p016240119341168;
            delay[62] <= delay[63] + prod_0p015625685134393;
            delay[63] <= delay[64] + prod_0p014982068119995;
            delay[64] <= delay[65] + prod_0p014313833302428;
            delay[65] <= delay[66] + prod_0p013625640953271;
            delay[66] <= delay[67] + prod_0p012922200064683;
            delay[67] <= delay[68] + prod_0p012208221821634;
            delay[68] <= delay[69] + prod_0p011488373629809;
            delay[69] <= delay[70] + prod_0p010767234225885;
            delay[70] <= delay[71] + prod_0p010049250380228;
            delay[71] <= delay[72] + prod_0p009338695679029;
            delay[72] <= delay[73] + prod_0p008639631844000;
            delay[73] <= delay[74] + prod_0p007955873013229;
            delay[74] <= delay[75] + prod_0p007290953367230;
            delay[75] <= delay[76] + prod_0p006648098440041;
            delay[76] <= delay[77] + prod_0p006030200407157;
            delay[77] <= delay[78] + prod_0p005439797590611;
            delay[78] <= delay[79] + prod_0p004879058367434;
            delay[79] <= delay[80] + prod_0p004349769611730;
            delay[80] <= delay[81] + prod_0p003853329743345;
            delay[81] <= delay[82] + prod_0p003390746398472;
            delay[82] <= delay[83] + prod_0p002962638680102;
            delay[83] <= delay[84] + prod_0p002569243889922;
            delay[84] <= delay[85] + prod_0p002210428588641;
            delay[85] <= delay[86] + prod_0p001885703779546;
            delay[86] <= delay[87] + prod_0p001594243961096;
            delay[87] <= delay[88] + prod_0p001334909748964;
            delay[88] <= delay[89] + prod_0p001106273726935;
            delay[89] <= delay[90] + prod_0p000906649149747;
            delay[90] <= delay[91] + prod_0p000734121089916;
            delay[91] <= delay[92] + prod_0p000586579595082;
            delay[92] <= delay[93] + prod_0p000461754402763;
            delay[93] <= delay[94] + prod_0p000357250745826;
            delay[94] <= delay[95] + prod_0p000270585774593;
            delay[95] <= delay[96] + prod_0p000199225120333;
            delay[96] <= delay[97] + prod_0p000140619129891;
            delay[97] <= delay[98] + prod_0p000092238312301;
            delay[98] <= delay[99] + prod_0p000051607555144;
            delay[99] <= delay[100] + prod_0p000016338690936;
            delay[100] <=  - prod_0p000015838978451;
        end
    end

endmodule


