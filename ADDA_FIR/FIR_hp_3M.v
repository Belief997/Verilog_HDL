// This file was automatically generated by FIRDesigner software whose author is loywong.
// The file including:
//   ?  a 671 taps FIR low pass filter module based on Hamming window 
//         and it's normalized (to half Freq_sample) cut off frequency is 0.500.
//   ?  the CSD multipliers which were invoked by the filter module.
// The original coefficients are:
//    -0.010637157984332
//     0.010019109120374
//     0.005284442531356
//     0.002036304972377
//    -0.000070661049161
//    -0.001319160405792
//    -0.001938034372603
//    -0.002110906309105
//    -0.001983139125333
//    -0.001667739984795
//    -0.001251350199643
//    -0.000798395308804
//    -0.000355031916952
//     0.000046927875400
//     0.000387502172574
//     0.000655794674816
//     0.000847932573919
//     0.000965537970318
//     0.001013951113230
//     0.001001118040788
//     0.000936378377169
//     0.000830187477825
//     0.000693074460695
//     0.000535083400629
//     0.000365686831791
//     0.000193448104945
//     0.000025887526338
//    -0.000130751933239
//    -0.000271403671133
//    -0.000392189099473
//    -0.000490421733888
//    -0.000564537970177
//    -0.000613888781739
//    -0.000638804573678
//    -0.000640204530451
//    -0.000619885239071
//    -0.000580010028728
//    -0.000523059259547
//    -0.000451852218996
//    -0.000369468822649
//    -0.000279049452148
//    -0.000183521462318
//    -0.000086004256734
//     0.000010592272627
//     0.000103843508644
//     0.000191216402380
//     0.000270905109505
//     0.000339972864915
//     0.000400632321268
//     0.000441431072757
//     0.000484676446652
//     0.000490267233623
//     0.000509565672488
//     0.000497383335527
//     0.000471940394081
//     0.000448351097771
//     0.000404963603142
//     0.000345878176474
//     0.000287745081791
//     0.000225446430378
//     0.000150723470046
//     0.000071121375746
//    -0.000003777403829
//    -0.000075698403024
//    -0.000149939910081
//    -0.000223580958635
//    -0.000288914792923
//    -0.000343368526417
//    -0.000389998261604
//    -0.000431003309979
//    -0.000463493825448
//    -0.000483068757652
//    -0.000488511454582
//    -0.000482267481818
//    -0.000467123738818
//    -0.000442871930003
//    -0.000407557471672
//    -0.000360252537365
//    -0.000302753253499
//    -0.000238278080506
//    -0.000169541178580
//    -0.000097509344623
//    -0.000022120509649
//     0.000056301935159
//     0.000135582805604
//     0.000212519156837
//     0.000284114844126
//     0.000348713352137
//     0.000405932178706
//     0.000455545509093
//     0.000496663763067
//     0.000527552682583
//     0.000546377345845
//     0.000551824009197
//     0.000543631315911
//     0.000522974597703
//     0.000490443208993
//     0.000447656688014
//     0.000393004899282
//     0.000330917446534
//     0.000254860497985
//     0.000176622219239
//     0.000086409746424
//    -0.000002890481197
//    -0.000093543980808
//    -0.000185949731817
//    -0.000272002076543
//    -0.000354867503494
//    -0.000434043351066
//    -0.000502812585862
//    -0.000561667197245
//    -0.000610825493074
//    -0.000645098759781
//    -0.000663278281370
//    -0.000667866668977
//    -0.000658271299037
//    -0.000632374068889
//    -0.000591322226063
//    -0.000537746317635
//    -0.000471134423591
//    -0.000390681464090
//    -0.000298650041500
//    -0.000198566154554
//    -0.000092337570728
//     0.000019081271535
//     0.000132578335336
//     0.000244360024508
//     0.000351928673573
//     0.000454313334118
//     0.000549708924911
//     0.000635048952155
//     0.000707198666647
//     0.000764505858335
//     0.000806032995820
//     0.000830477253542
//     0.000835879311207
//     0.000821300911915
//     0.000787475573779
//     0.000735652495995
//     0.000666682697453
//     0.000581124967296
//     0.000480114418238
//     0.000365722988386
//     0.000240602970550
//     0.000107443809606
//    -0.000031631782474
//    -0.000173425118704
//    -0.000315407463963
//    -0.000452437109362
//    -0.000582952941516
//    -0.000700324503472
//    -0.000806886523648
//    -0.000895347907654
//    -0.000967277173120
//    -0.001018750148792
//    -0.001046876942412
//    -0.001053522469621
//    -0.001035722549540
//    -0.000993790868210
//    -0.000929812611981
//    -0.000842026186571
//    -0.000732018995810
//    -0.000603729341322
//    -0.000458468120234
//    -0.000299385224793
//    -0.000131186631082
//     0.000043611672557
//     0.000222167191164
//     0.000399770088819
//     0.000571717728426
//     0.000734969021613
//     0.000885778977877
//     0.001019515232348
//     0.001133364014002
//     0.001224992952329
//     0.001291460944742
//     0.001329292244818
//     0.001337262753940
//     0.001315301014142
//     0.001263232728687
//     0.001181021453257
//     0.001070376741302
//     0.000933715488556
//     0.000773177826181
//     0.000591012514049
//     0.000390942745603
//     0.000177649657508
//    -0.000044288172742
//    -0.000270460824857
//    -0.000496245017214
//    -0.000716372841401
//    -0.000925419102546
//    -0.001118577493783
//    -0.001291330025415
//    -0.001439035403261
//    -0.001556940333362
//    -0.001642241407582
//    -0.001692195353790
//    -0.001706187280388
//    -0.001681431670775
//    -0.001619284984364
//    -0.001517743750544
//    -0.001381168029941
//    -0.001209765049681
//    -0.001006862218609
//    -0.000777015943843
//    -0.000523127142025
//    -0.000251975066314
//     0.000031080014503
//     0.000321139029943
//     0.000610649036597
//     0.000893796082537
//     0.001164389963439
//     0.001414365093299
//     0.001638381515244
//     0.001831566636285
//     0.001987898865603
//     0.002103507151916
//     0.002175168552813
//     0.002199770831104
//     0.002175440181160
//     0.002101963600273
//     0.001979811199855
//     0.001809551714876
//     0.001594324038229
//     0.001337907401144
//     0.001044986969926
//     0.000720936790405
//     0.000372663219595
//     0.000007001844772
//    -0.000368882744022
//    -0.000746778118645
//    -0.001117449265058
//    -0.001472420714525
//    -0.001803862365738
//    -0.002103735783255
//    -0.002364113902335
//    -0.002578322327590
//    -0.002740811241672
//    -0.002846303958176
//    -0.002890614994053
//    -0.002871497292782
//    -0.002787952256151
//    -0.002639892046411
//    -0.002428269823898
//    -0.002156085890105
//    -0.001827558953831
//    -0.001449300037894
//    -0.001027386341700
//    -0.000570625036045
//    -0.000086962818785
//     0.000411954263558
//     0.000917272484268
//     0.001416954155502
//     0.001899777694938
//     0.002354984692705
//     0.002770428314490
//     0.003137070223319
//     0.003445273826937
//     0.003685379144415
//     0.003850764675840
//     0.003935070187112
//     0.003933736529200
//     0.003844919574787
//     0.003666797847893
//     0.003400400862952
//     0.003049560226168
//     0.002618057264245
//     0.002112681056194
//     0.001542382737727
//     0.000917173150631
//     0.000249167461179
//    -0.000448290544196
//    -0.001160615730861
//    -0.001873721622746
//    -0.002571438364894
//    -0.003237763645681
//    -0.003856759618712
//    -0.004413280766291
//    -0.004892449363129
//    -0.005280931661260
//    -0.005566738520437
//    -0.005739372782409
//    -0.005790170882407
//    -0.005713131084910
//    -0.005504612562743
//    -0.005163120251677
//    -0.004690032646217
//    -0.004089870640222
//    -0.003369793618121
//    -0.002539390347445
//    -0.001611322305837
//    -0.000601247638630
//     0.000473563918050
//     0.001593657321957
//     0.002737177080669
//     0.003880036695260
//     0.004998442408490
//     0.006066818206839
//     0.007060289580879
//     0.007952514757540
//     0.008719537053835
//     0.009336625351933
//     0.009782130944036
//     0.010035195664290
//     0.010076780048862
//     0.009892477101017
//     0.009469049637762
//     0.008797128063081
//     0.007871630391907
//     0.006690043389398
//     0.005255047717133
//     0.003572847464761
//     0.001652248529702
//    -0.000492196465972
//    -0.002842531708928
//    -0.005378052997361
//    -0.008073481473903
//    -0.010901980979532
//    -0.013833318121693
//    -0.016834228536721
//    -0.019871061855181
//    -0.022907681087362
//    -0.025907685202249
//    -0.028833775742233
//    -0.031650754888938
//    -0.034322970686648
//    -0.036816477657865
//    -0.039099230128115
//    -0.041141956788989
//    -0.042917866233768
//    -0.044403893105783
//    -0.045580666550549
//    -0.046432576048994
//    -0.046948160834813
//     0.952879280278643
//    -0.046948160834813
//    -0.046432576048994
//    -0.045580666550549
//    -0.044403893105783
//    -0.042917866233768
//    -0.041141956788989
//    -0.039099230128115
//    -0.036816477657865
//    -0.034322970686648
//    -0.031650754888938
//    -0.028833775742233
//    -0.025907685202249
//    -0.022907681087362
//    -0.019871061855181
//    -0.016834228536721
//    -0.013833318121693
//    -0.010901980979532
//    -0.008073481473903
//    -0.005378052997361
//    -0.002842531708928
//    -0.000492196465972
//     0.001652248529702
//     0.003572847464761
//     0.005255047717133
//     0.006690043389398
//     0.007871630391907
//     0.008797128063081
//     0.009469049637762
//     0.009892477101017
//     0.010076780048862
//     0.010035195664290
//     0.009782130944036
//     0.009336625351933
//     0.008719537053835
//     0.007952514757540
//     0.007060289580879
//     0.006066818206839
//     0.004998442408490
//     0.003880036695260
//     0.002737177080669
//     0.001593657321957
//     0.000473563918050
//    -0.000601247638630
//    -0.001611322305837
//    -0.002539390347445
//    -0.003369793618121
//    -0.004089870640222
//    -0.004690032646217
//    -0.005163120251677
//    -0.005504612562743
//    -0.005713131084910
//    -0.005790170882407
//    -0.005739372782409
//    -0.005566738520437
//    -0.005280931661260
//    -0.004892449363129
//    -0.004413280766291
//    -0.003856759618712
//    -0.003237763645681
//    -0.002571438364894
//    -0.001873721622746
//    -0.001160615730861
//    -0.000448290544196
//     0.000249167461179
//     0.000917173150631
//     0.001542382737727
//     0.002112681056194
//     0.002618057264245
//     0.003049560226168
//     0.003400400862952
//     0.003666797847893
//     0.003844919574787
//     0.003933736529200
//     0.003935070187112
//     0.003850764675840
//     0.003685379144415
//     0.003445273826937
//     0.003137070223319
//     0.002770428314490
//     0.002354984692705
//     0.001899777694938
//     0.001416954155502
//     0.000917272484268
//     0.000411954263558
//    -0.000086962818785
//    -0.000570625036045
//    -0.001027386341700
//    -0.001449300037894
//    -0.001827558953831
//    -0.002156085890105
//    -0.002428269823898
//    -0.002639892046411
//    -0.002787952256151
//    -0.002871497292782
//    -0.002890614994053
//    -0.002846303958176
//    -0.002740811241672
//    -0.002578322327590
//    -0.002364113902335
//    -0.002103735783255
//    -0.001803862365738
//    -0.001472420714525
//    -0.001117449265058
//    -0.000746778118645
//    -0.000368882744022
//     0.000007001844772
//     0.000372663219595
//     0.000720936790405
//     0.001044986969926
//     0.001337907401144
//     0.001594324038229
//     0.001809551714876
//     0.001979811199855
//     0.002101963600273
//     0.002175440181160
//     0.002199770831104
//     0.002175168552813
//     0.002103507151916
//     0.001987898865603
//     0.001831566636285
//     0.001638381515244
//     0.001414365093299
//     0.001164389963439
//     0.000893796082537
//     0.000610649036597
//     0.000321139029943
//     0.000031080014503
//    -0.000251975066314
//    -0.000523127142025
//    -0.000777015943843
//    -0.001006862218609
//    -0.001209765049681
//    -0.001381168029941
//    -0.001517743750544
//    -0.001619284984364
//    -0.001681431670775
//    -0.001706187280388
//    -0.001692195353790
//    -0.001642241407582
//    -0.001556940333362
//    -0.001439035403261
//    -0.001291330025415
//    -0.001118577493783
//    -0.000925419102546
//    -0.000716372841401
//    -0.000496245017214
//    -0.000270460824857
//    -0.000044288172742
//     0.000177649657508
//     0.000390942745603
//     0.000591012514049
//     0.000773177826181
//     0.000933715488556
//     0.001070376741302
//     0.001181021453257
//     0.001263232728687
//     0.001315301014142
//     0.001337262753940
//     0.001329292244818
//     0.001291460944742
//     0.001224992952329
//     0.001133364014002
//     0.001019515232348
//     0.000885778977877
//     0.000734969021613
//     0.000571717728426
//     0.000399770088819
//     0.000222167191164
//     0.000043611672557
//    -0.000131186631082
//    -0.000299385224793
//    -0.000458468120234
//    -0.000603729341322
//    -0.000732018995810
//    -0.000842026186571
//    -0.000929812611981
//    -0.000993790868210
//    -0.001035722549540
//    -0.001053522469621
//    -0.001046876942412
//    -0.001018750148792
//    -0.000967277173120
//    -0.000895347907654
//    -0.000806886523648
//    -0.000700324503472
//    -0.000582952941516
//    -0.000452437109362
//    -0.000315407463963
//    -0.000173425118704
//    -0.000031631782474
//     0.000107443809606
//     0.000240602970550
//     0.000365722988386
//     0.000480114418238
//     0.000581124967296
//     0.000666682697453
//     0.000735652495995
//     0.000787475573779
//     0.000821300911915
//     0.000835879311207
//     0.000830477253542
//     0.000806032995820
//     0.000764505858335
//     0.000707198666647
//     0.000635048952155
//     0.000549708924911
//     0.000454313334118
//     0.000351928673573
//     0.000244360024508
//     0.000132578335336
//     0.000019081271535
//    -0.000092337570728
//    -0.000198566154554
//    -0.000298650041500
//    -0.000390681464090
//    -0.000471134423591
//    -0.000537746317635
//    -0.000591322226063
//    -0.000632374068889
//    -0.000658271299037
//    -0.000667866668977
//    -0.000663278281370
//    -0.000645098759781
//    -0.000610825493074
//    -0.000561667197245
//    -0.000502812585862
//    -0.000434043351066
//    -0.000354867503494
//    -0.000272002076543
//    -0.000185949731817
//    -0.000093543980808
//    -0.000002890481197
//     0.000086409746424
//     0.000176622219239
//     0.000254860497985
//     0.000330917446534
//     0.000393004899282
//     0.000447656688014
//     0.000490443208993
//     0.000522974597703
//     0.000543631315911
//     0.000551824009197
//     0.000546377345845
//     0.000527552682583
//     0.000496663763067
//     0.000455545509093
//     0.000405932178706
//     0.000348713352137
//     0.000284114844126
//     0.000212519156837
//     0.000135582805604
//     0.000056301935159
//    -0.000022120509649
//    -0.000097509344623
//    -0.000169541178580
//    -0.000238278080506
//    -0.000302753253499
//    -0.000360252537365
//    -0.000407557471672
//    -0.000442871930003
//    -0.000467123738818
//    -0.000482267481818
//    -0.000488511454582
//    -0.000483068757652
//    -0.000463493825448
//    -0.000431003309979
//    -0.000389998261604
//    -0.000343368526417
//    -0.000288914792923
//    -0.000223580958635
//    -0.000149939910081
//    -0.000075698403024
//    -0.000003777403829
//     0.000071121375746
//     0.000150723470046
//     0.000225446430378
//     0.000287745081791
//     0.000345878176474
//     0.000404963603142
//     0.000448351097771
//     0.000471940394081
//     0.000497383335527
//     0.000509565672488
//     0.000490267233623
//     0.000484676446652
//     0.000441431072757
//     0.000400632321268
//     0.000339972864915
//     0.000270905109505
//     0.000191216402380
//     0.000103843508644
//     0.000010592272627
//    -0.000086004256734
//    -0.000183521462318
//    -0.000279049452148
//    -0.000369468822649
//    -0.000451852218996
//    -0.000523059259547
//    -0.000580010028728
//    -0.000619885239071
//    -0.000640204530451
//    -0.000638804573678
//    -0.000613888781739
//    -0.000564537970177
//    -0.000490421733888
//    -0.000392189099473
//    -0.000271403671133
//    -0.000130751933239
//     0.000025887526338
//     0.000193448104945
//     0.000365686831791
//     0.000535083400629
//     0.000693074460695
//     0.000830187477825
//     0.000936378377169
//     0.001001118040788
//     0.001013951113230
//     0.000965537970318
//     0.000847932573919
//     0.000655794674816
//     0.000387502172574
//     0.000046927875400
//    -0.000355031916952
//    -0.000798395308804
//    -0.001251350199643
//    -0.001667739984795
//    -0.001983139125333
//    -0.002110906309105
//    -0.001938034372603
//    -0.001319160405792
//    -0.000070661049161
//     0.002036304972377
//     0.005284442531356
//     0.010019109120374
//    -0.010637157984332

// CSD Multiplier for Coefficient 0.010637157984332
module FIR_hp_3M_CSDMult_p010637157984332
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:10], in[15:6]} - {shiftSign[15:8], in[15:8]}) - ({shiftSign[15:6], in[15:10]} + {shiftSign[15:3], in[15:13]});
endmodule

// CSD Multiplier for Coefficient 0.010019109120374
module FIR_hp_3M_CSDMult_p010019109120374
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:9], in[15:7]} + {shiftSign[15:7], in[15:9]} + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.005284442531356
module FIR_hp_3M_CSDMult_p005284442531356
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} - {shiftSign[15:7], in[15:9]}) - ({shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.002036304972377
module FIR_hp_3M_CSDMult_p002036304972377
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000070661049161
module FIR_hp_3M_CSDMult_p000070661049161
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001319160405792
module FIR_hp_3M_CSDMult_p001319160405792
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]}) - ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001938034372603
module FIR_hp_3M_CSDMult_p001938034372603
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.002110906309105
module FIR_hp_3M_CSDMult_p002110906309105
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001983139125333
module FIR_hp_3M_CSDMult_p001983139125333
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]};
endmodule

// CSD Multiplier for Coefficient 0.001667739984795
module FIR_hp_3M_CSDMult_p001667739984795
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001251350199643
module FIR_hp_3M_CSDMult_p001251350199643
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000798395308804
module FIR_hp_3M_CSDMult_p000798395308804
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000355031916952
module FIR_hp_3M_CSDMult_p000355031916952
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000046927875400
module FIR_hp_3M_CSDMult_p000046927875400
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000387502172574
module FIR_hp_3M_CSDMult_p000387502172574
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000655794674816
module FIR_hp_3M_CSDMult_p000655794674816
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000847932573919
module FIR_hp_3M_CSDMult_p000847932573919
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000965537970318
module FIR_hp_3M_CSDMult_p000965537970318
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001013951113230
module FIR_hp_3M_CSDMult_p001013951113230
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001001118040788
module FIR_hp_3M_CSDMult_p001001118040788
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]};
endmodule

// CSD Multiplier for Coefficient 0.000936378377169
module FIR_hp_3M_CSDMult_p000936378377169
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000830187477825
module FIR_hp_3M_CSDMult_p000830187477825
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000693074460695
module FIR_hp_3M_CSDMult_p000693074460695
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000535083400629
module FIR_hp_3M_CSDMult_p000535083400629
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000365686831791
module FIR_hp_3M_CSDMult_p000365686831791
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000193448104945
module FIR_hp_3M_CSDMult_p000193448104945
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000025887526338
module FIR_hp_3M_CSDMult_p000025887526338
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = 16'b0;
endmodule

// CSD Multiplier for Coefficient 0.000130751933239
module FIR_hp_3M_CSDMult_p000130751933239
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000271403671133
module FIR_hp_3M_CSDMult_p000271403671133
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.000392189099473
module FIR_hp_3M_CSDMult_p000392189099473
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000490421733888
module FIR_hp_3M_CSDMult_p000490421733888
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.000564537970177
module FIR_hp_3M_CSDMult_p000564537970177
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000613888781739
module FIR_hp_3M_CSDMult_p000613888781739
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000638804573678
module FIR_hp_3M_CSDMult_p000638804573678
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000640204530451
module FIR_hp_3M_CSDMult_p000640204530451
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000619885239071
module FIR_hp_3M_CSDMult_p000619885239071
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000580010028728
module FIR_hp_3M_CSDMult_p000580010028728
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000523059259547
module FIR_hp_3M_CSDMult_p000523059259547
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000451852218996
module FIR_hp_3M_CSDMult_p000451852218996
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000369468822649
module FIR_hp_3M_CSDMult_p000369468822649
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000279049452148
module FIR_hp_3M_CSDMult_p000279049452148
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000183521462318
module FIR_hp_3M_CSDMult_p000183521462318
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000086004256734
module FIR_hp_3M_CSDMult_p000086004256734
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000010592272627
module FIR_hp_3M_CSDMult_p000010592272627
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = 16'b0;
endmodule

// CSD Multiplier for Coefficient 0.000103843508644
module FIR_hp_3M_CSDMult_p000103843508644
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000191216402380
module FIR_hp_3M_CSDMult_p000191216402380
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000270905109505
module FIR_hp_3M_CSDMult_p000270905109505
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.000339972864915
module FIR_hp_3M_CSDMult_p000339972864915
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000400632321268
module FIR_hp_3M_CSDMult_p000400632321268
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000441431072757
module FIR_hp_3M_CSDMult_p000441431072757
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000484676446652
module FIR_hp_3M_CSDMult_p000484676446652
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000490267233623
module FIR_hp_3M_CSDMult_p000490267233623
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.000509565672488
module FIR_hp_3M_CSDMult_p000509565672488
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.000497383335527
module FIR_hp_3M_CSDMult_p000497383335527
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.000471940394081
module FIR_hp_3M_CSDMult_p000471940394081
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000448351097771
module FIR_hp_3M_CSDMult_p000448351097771
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000404963603142
module FIR_hp_3M_CSDMult_p000404963603142
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000345878176474
module FIR_hp_3M_CSDMult_p000345878176474
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000287745081791
module FIR_hp_3M_CSDMult_p000287745081791
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000225446430378
module FIR_hp_3M_CSDMult_p000225446430378
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000150723470046
module FIR_hp_3M_CSDMult_p000150723470046
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000071121375746
module FIR_hp_3M_CSDMult_p000071121375746
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000003777403829
module FIR_hp_3M_CSDMult_p000003777403829
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = 16'b0;
endmodule

// CSD Multiplier for Coefficient 0.000075698403024
module FIR_hp_3M_CSDMult_p000075698403024
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000149939910081
module FIR_hp_3M_CSDMult_p000149939910081
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000223580958635
module FIR_hp_3M_CSDMult_p000223580958635
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000288914792923
module FIR_hp_3M_CSDMult_p000288914792923
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000343368526417
module FIR_hp_3M_CSDMult_p000343368526417
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000389998261604
module FIR_hp_3M_CSDMult_p000389998261604
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000431003309979
module FIR_hp_3M_CSDMult_p000431003309979
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000463493825448
module FIR_hp_3M_CSDMult_p000463493825448
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000483068757652
module FIR_hp_3M_CSDMult_p000483068757652
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000488511454582
module FIR_hp_3M_CSDMult_p000488511454582
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.000482267481818
module FIR_hp_3M_CSDMult_p000482267481818
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000467123738818
module FIR_hp_3M_CSDMult_p000467123738818
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000442871930003
module FIR_hp_3M_CSDMult_p000442871930003
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000407557471672
module FIR_hp_3M_CSDMult_p000407557471672
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000360252537365
module FIR_hp_3M_CSDMult_p000360252537365
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000302753253499
module FIR_hp_3M_CSDMult_p000302753253499
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000238278080506
module FIR_hp_3M_CSDMult_p000238278080506
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000169541178580
module FIR_hp_3M_CSDMult_p000169541178580
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000097509344623
module FIR_hp_3M_CSDMult_p000097509344623
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000022120509649
module FIR_hp_3M_CSDMult_p000022120509649
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = 16'b0;
endmodule

// CSD Multiplier for Coefficient 0.000056301935159
module FIR_hp_3M_CSDMult_p000056301935159
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000135582805604
module FIR_hp_3M_CSDMult_p000135582805604
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000212519156837
module FIR_hp_3M_CSDMult_p000212519156837
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000284114844126
module FIR_hp_3M_CSDMult_p000284114844126
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000348713352137
module FIR_hp_3M_CSDMult_p000348713352137
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000405932178706
module FIR_hp_3M_CSDMult_p000405932178706
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000455545509093
module FIR_hp_3M_CSDMult_p000455545509093
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000496663763067
module FIR_hp_3M_CSDMult_p000496663763067
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.000527552682583
module FIR_hp_3M_CSDMult_p000527552682583
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000546377345845
module FIR_hp_3M_CSDMult_p000546377345845
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000551824009197
module FIR_hp_3M_CSDMult_p000551824009197
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000543631315911
module FIR_hp_3M_CSDMult_p000543631315911
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000522974597703
module FIR_hp_3M_CSDMult_p000522974597703
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000490443208993
module FIR_hp_3M_CSDMult_p000490443208993
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.000447656688014
module FIR_hp_3M_CSDMult_p000447656688014
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000393004899282
module FIR_hp_3M_CSDMult_p000393004899282
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000330917446534
module FIR_hp_3M_CSDMult_p000330917446534
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000254860497985
module FIR_hp_3M_CSDMult_p000254860497985
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.000176622219239
module FIR_hp_3M_CSDMult_p000176622219239
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000086409746424
module FIR_hp_3M_CSDMult_p000086409746424
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000002890481197
module FIR_hp_3M_CSDMult_p000002890481197
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = 16'b0;
endmodule

// CSD Multiplier for Coefficient 0.000093543980808
module FIR_hp_3M_CSDMult_p000093543980808
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000185949731817
module FIR_hp_3M_CSDMult_p000185949731817
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000272002076543
module FIR_hp_3M_CSDMult_p000272002076543
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.000354867503494
module FIR_hp_3M_CSDMult_p000354867503494
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000434043351066
module FIR_hp_3M_CSDMult_p000434043351066
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000502812585862
module FIR_hp_3M_CSDMult_p000502812585862
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.000561667197245
module FIR_hp_3M_CSDMult_p000561667197245
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000610825493074
module FIR_hp_3M_CSDMult_p000610825493074
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000645098759781
module FIR_hp_3M_CSDMult_p000645098759781
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000663278281370
module FIR_hp_3M_CSDMult_p000663278281370
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000667866668977
module FIR_hp_3M_CSDMult_p000667866668977
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000658271299037
module FIR_hp_3M_CSDMult_p000658271299037
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000632374068889
module FIR_hp_3M_CSDMult_p000632374068889
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000591322226063
module FIR_hp_3M_CSDMult_p000591322226063
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000537746317635
module FIR_hp_3M_CSDMult_p000537746317635
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000471134423591
module FIR_hp_3M_CSDMult_p000471134423591
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000390681464090
module FIR_hp_3M_CSDMult_p000390681464090
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000298650041500
module FIR_hp_3M_CSDMult_p000298650041500
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000198566154554
module FIR_hp_3M_CSDMult_p000198566154554
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000092337570728
module FIR_hp_3M_CSDMult_p000092337570728
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000019081271535
module FIR_hp_3M_CSDMult_p000019081271535
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = 16'b0;
endmodule

// CSD Multiplier for Coefficient 0.000132578335336
module FIR_hp_3M_CSDMult_p000132578335336
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000244360024508
module FIR_hp_3M_CSDMult_p000244360024508
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.000351928673573
module FIR_hp_3M_CSDMult_p000351928673573
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000454313334118
module FIR_hp_3M_CSDMult_p000454313334118
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000549708924911
module FIR_hp_3M_CSDMult_p000549708924911
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000635048952155
module FIR_hp_3M_CSDMult_p000635048952155
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000707198666647
module FIR_hp_3M_CSDMult_p000707198666647
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000764505858335
module FIR_hp_3M_CSDMult_p000764505858335
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000806032995820
module FIR_hp_3M_CSDMult_p000806032995820
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000830477253542
module FIR_hp_3M_CSDMult_p000830477253542
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000835879311207
module FIR_hp_3M_CSDMult_p000835879311207
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000821300911915
module FIR_hp_3M_CSDMult_p000821300911915
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000787475573779
module FIR_hp_3M_CSDMult_p000787475573779
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000735652495995
module FIR_hp_3M_CSDMult_p000735652495995
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.000666682697453
module FIR_hp_3M_CSDMult_p000666682697453
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000581124967296
module FIR_hp_3M_CSDMult_p000581124967296
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000480114418238
module FIR_hp_3M_CSDMult_p000480114418238
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000365722988386
module FIR_hp_3M_CSDMult_p000365722988386
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000240602970550
module FIR_hp_3M_CSDMult_p000240602970550
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000107443809606
module FIR_hp_3M_CSDMult_p000107443809606
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000031631782474
module FIR_hp_3M_CSDMult_p000031631782474
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000173425118704
module FIR_hp_3M_CSDMult_p000173425118704
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000315407463963
module FIR_hp_3M_CSDMult_p000315407463963
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000452437109362
module FIR_hp_3M_CSDMult_p000452437109362
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000582952941516
module FIR_hp_3M_CSDMult_p000582952941516
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000700324503472
module FIR_hp_3M_CSDMult_p000700324503472
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000806886523648
module FIR_hp_3M_CSDMult_p000806886523648
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000895347907654
module FIR_hp_3M_CSDMult_p000895347907654
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000967277173120
module FIR_hp_3M_CSDMult_p000967277173120
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001018750148792
module FIR_hp_3M_CSDMult_p001018750148792
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001046876942412
module FIR_hp_3M_CSDMult_p001046876942412
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001053522469621
module FIR_hp_3M_CSDMult_p001053522469621
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001035722549540
module FIR_hp_3M_CSDMult_p001035722549540
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000993790868210
module FIR_hp_3M_CSDMult_p000993790868210
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]};
endmodule

// CSD Multiplier for Coefficient 0.000929812611981
module FIR_hp_3M_CSDMult_p000929812611981
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000842026186571
module FIR_hp_3M_CSDMult_p000842026186571
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000732018995810
module FIR_hp_3M_CSDMult_p000732018995810
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000603729341322
module FIR_hp_3M_CSDMult_p000603729341322
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000458468120234
module FIR_hp_3M_CSDMult_p000458468120234
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000299385224793
module FIR_hp_3M_CSDMult_p000299385224793
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000131186631082
module FIR_hp_3M_CSDMult_p000131186631082
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000043611672557
module FIR_hp_3M_CSDMult_p000043611672557
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000222167191164
module FIR_hp_3M_CSDMult_p000222167191164
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000399770088819
module FIR_hp_3M_CSDMult_p000399770088819
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000571717728426
module FIR_hp_3M_CSDMult_p000571717728426
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000734969021613
module FIR_hp_3M_CSDMult_p000734969021613
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.000885778977877
module FIR_hp_3M_CSDMult_p000885778977877
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001019515232348
module FIR_hp_3M_CSDMult_p001019515232348
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001133364014002
module FIR_hp_3M_CSDMult_p001133364014002
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001224992952329
module FIR_hp_3M_CSDMult_p001224992952329
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.001291460944742
module FIR_hp_3M_CSDMult_p001291460944742
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001329292244818
module FIR_hp_3M_CSDMult_p001329292244818
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]}) - ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001337262753940
module FIR_hp_3M_CSDMult_p001337262753940
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]}) - ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001315301014142
module FIR_hp_3M_CSDMult_p001315301014142
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]}) - ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001263232728687
module FIR_hp_3M_CSDMult_p001263232728687
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001181021453257
module FIR_hp_3M_CSDMult_p001181021453257
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001070376741302
module FIR_hp_3M_CSDMult_p001070376741302
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000933715488556
module FIR_hp_3M_CSDMult_p000933715488556
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000773177826181
module FIR_hp_3M_CSDMult_p000773177826181
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000591012514049
module FIR_hp_3M_CSDMult_p000591012514049
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000390942745603
module FIR_hp_3M_CSDMult_p000390942745603
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000177649657508
module FIR_hp_3M_CSDMult_p000177649657508
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000044288172742
module FIR_hp_3M_CSDMult_p000044288172742
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000270460824857
module FIR_hp_3M_CSDMult_p000270460824857
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.000496245017214
module FIR_hp_3M_CSDMult_p000496245017214
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.000716372841401
module FIR_hp_3M_CSDMult_p000716372841401
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000925419102546
module FIR_hp_3M_CSDMult_p000925419102546
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001118577493783
module FIR_hp_3M_CSDMult_p001118577493783
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.001291330025415
module FIR_hp_3M_CSDMult_p001291330025415
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001439035403261
module FIR_hp_3M_CSDMult_p001439035403261
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001556940333362
module FIR_hp_3M_CSDMult_p001556940333362
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]}) + ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001642241407582
module FIR_hp_3M_CSDMult_p001642241407582
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]}) + ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001692195353790
module FIR_hp_3M_CSDMult_p001692195353790
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001706187280388
module FIR_hp_3M_CSDMult_p001706187280388
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001681431670775
module FIR_hp_3M_CSDMult_p001681431670775
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001619284984364
module FIR_hp_3M_CSDMult_p001619284984364
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]}) + ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001517743750544
module FIR_hp_3M_CSDMult_p001517743750544
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001381168029941
module FIR_hp_3M_CSDMult_p001381168029941
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]}) - ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001209765049681
module FIR_hp_3M_CSDMult_p001209765049681
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001006862218609
module FIR_hp_3M_CSDMult_p001006862218609
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]};
endmodule

// CSD Multiplier for Coefficient 0.000777015943843
module FIR_hp_3M_CSDMult_p000777015943843
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000523127142025
module FIR_hp_3M_CSDMult_p000523127142025
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000251975066314
module FIR_hp_3M_CSDMult_p000251975066314
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.000031080014503
module FIR_hp_3M_CSDMult_p000031080014503
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000321139029943
module FIR_hp_3M_CSDMult_p000321139029943
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000610649036597
module FIR_hp_3M_CSDMult_p000610649036597
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000893796082537
module FIR_hp_3M_CSDMult_p000893796082537
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001164389963439
module FIR_hp_3M_CSDMult_p001164389963439
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001414365093299
module FIR_hp_3M_CSDMult_p001414365093299
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001638381515244
module FIR_hp_3M_CSDMult_p001638381515244
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]}) + ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001831566636285
module FIR_hp_3M_CSDMult_p001831566636285
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.001987898865603
module FIR_hp_3M_CSDMult_p001987898865603
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.002103507151916
module FIR_hp_3M_CSDMult_p002103507151916
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.002175168552813
module FIR_hp_3M_CSDMult_p002175168552813
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.002199770831104
module FIR_hp_3M_CSDMult_p002199770831104
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.002175440181160
module FIR_hp_3M_CSDMult_p002175440181160
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.002101963600273
module FIR_hp_3M_CSDMult_p002101963600273
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.001979811199855
module FIR_hp_3M_CSDMult_p001979811199855
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]};
endmodule

// CSD Multiplier for Coefficient 0.001809551714876
module FIR_hp_3M_CSDMult_p001809551714876
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001594324038229
module FIR_hp_3M_CSDMult_p001594324038229
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.001337907401144
module FIR_hp_3M_CSDMult_p001337907401144
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]}) - ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001044986969926
module FIR_hp_3M_CSDMult_p001044986969926
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000720936790405
module FIR_hp_3M_CSDMult_p000720936790405
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000372663219595
module FIR_hp_3M_CSDMult_p000372663219595
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000007001844772
module FIR_hp_3M_CSDMult_p000007001844772
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = 16'b0;
endmodule

// CSD Multiplier for Coefficient 0.000368882744022
module FIR_hp_3M_CSDMult_p000368882744022
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000746778118645
module FIR_hp_3M_CSDMult_p000746778118645
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.001117449265058
module FIR_hp_3M_CSDMult_p001117449265058
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.001472420714525
module FIR_hp_3M_CSDMult_p001472420714525
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.001803862365738
module FIR_hp_3M_CSDMult_p001803862365738
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.002103735783255
module FIR_hp_3M_CSDMult_p002103735783255
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.002364113902335
module FIR_hp_3M_CSDMult_p002364113902335
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} + {shiftSign[15:5], in[15:11]}) - ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.002578322327590
module FIR_hp_3M_CSDMult_p002578322327590
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.002740811241672
module FIR_hp_3M_CSDMult_p002740811241672
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]}) - ({shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.002846303958176
module FIR_hp_3M_CSDMult_p002846303958176
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]}) - ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.002890614994053
module FIR_hp_3M_CSDMult_p002890614994053
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.002871497292782
module FIR_hp_3M_CSDMult_p002871497292782
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.002787952256151
module FIR_hp_3M_CSDMult_p002787952256151
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]}) - ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.002639892046411
module FIR_hp_3M_CSDMult_p002639892046411
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]}) - ({shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.002428269823898
module FIR_hp_3M_CSDMult_p002428269823898
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.002156085890105
module FIR_hp_3M_CSDMult_p002156085890105
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001827558953831
module FIR_hp_3M_CSDMult_p001827558953831
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001449300037894
module FIR_hp_3M_CSDMult_p001449300037894
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001027386341700
module FIR_hp_3M_CSDMult_p001027386341700
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000570625036045
module FIR_hp_3M_CSDMult_p000570625036045
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000086962818785
module FIR_hp_3M_CSDMult_p000086962818785
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000411954263558
module FIR_hp_3M_CSDMult_p000411954263558
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000917272484268
module FIR_hp_3M_CSDMult_p000917272484268
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001416954155502
module FIR_hp_3M_CSDMult_p001416954155502
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001899777694938
module FIR_hp_3M_CSDMult_p001899777694938
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.002354984692705
module FIR_hp_3M_CSDMult_p002354984692705
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} + {shiftSign[15:5], in[15:11]}) - ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.002770428314490
module FIR_hp_3M_CSDMult_p002770428314490
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]}) - ({shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.003137070223319
module FIR_hp_3M_CSDMult_p003137070223319
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]}) + ({shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.003445273826937
module FIR_hp_3M_CSDMult_p003445273826937
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.003685379144415
module FIR_hp_3M_CSDMult_p003685379144415
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.003850764675840
module FIR_hp_3M_CSDMult_p003850764675840
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.003935070187112
module FIR_hp_3M_CSDMult_p003935070187112
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]};
endmodule

// CSD Multiplier for Coefficient 0.003933736529200
module FIR_hp_3M_CSDMult_p003933736529200
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]};
endmodule

// CSD Multiplier for Coefficient 0.003844919574787
module FIR_hp_3M_CSDMult_p003844919574787
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.003666797847893
module FIR_hp_3M_CSDMult_p003666797847893
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.003400400862952
module FIR_hp_3M_CSDMult_p003400400862952
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.003049560226168
module FIR_hp_3M_CSDMult_p003049560226168
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]}) + ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.002618057264245
module FIR_hp_3M_CSDMult_p002618057264245
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} + {shiftSign[15:5], in[15:11]}) + ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.002112681056194
module FIR_hp_3M_CSDMult_p002112681056194
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001542382737727
module FIR_hp_3M_CSDMult_p001542382737727
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000917173150631
module FIR_hp_3M_CSDMult_p000917173150631
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000249167461179
module FIR_hp_3M_CSDMult_p000249167461179
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.000448290544196
module FIR_hp_3M_CSDMult_p000448290544196
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001160615730861
module FIR_hp_3M_CSDMult_p001160615730861
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:6], in[15:10]} + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.001873721622746
module FIR_hp_3M_CSDMult_p001873721622746
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.002571438364894
module FIR_hp_3M_CSDMult_p002571438364894
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.003237763645681
module FIR_hp_3M_CSDMult_p003237763645681
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]}) + ({shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.003856759618712
module FIR_hp_3M_CSDMult_p003856759618712
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.004413280766291
module FIR_hp_3M_CSDMult_p004413280766291
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.004892449363129
module FIR_hp_3M_CSDMult_p004892449363129
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} + {shiftSign[15:6], in[15:10]};
endmodule

// CSD Multiplier for Coefficient 0.005280931661260
module FIR_hp_3M_CSDMult_p005280931661260
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} - {shiftSign[15:7], in[15:9]}) - ({shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.005566738520437
module FIR_hp_3M_CSDMult_p005566738520437
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} - {shiftSign[15:7], in[15:9]}) - ({shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.005739372782409
module FIR_hp_3M_CSDMult_p005739372782409
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:9], in[15:7]} - {shiftSign[15:7], in[15:9]} - {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.005790170882407
module FIR_hp_3M_CSDMult_p005790170882407
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} - {shiftSign[15:7], in[15:9]}) - ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.005713131084910
module FIR_hp_3M_CSDMult_p005713131084910
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} - {shiftSign[15:7], in[15:9]}) - ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.005504612562743
module FIR_hp_3M_CSDMult_p005504612562743
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} - {shiftSign[15:7], in[15:9]}) - ({shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]});
endmodule

// CSD Multiplier for Coefficient 0.005163120251677
module FIR_hp_3M_CSDMult_p005163120251677
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} + {shiftSign[15:6], in[15:10]}) + ({shiftSign[15:4], in[15:12]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.004690032646217
module FIR_hp_3M_CSDMult_p004690032646217
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} + {shiftSign[15:6], in[15:10]}) - ({shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.004089870640222
module FIR_hp_3M_CSDMult_p004089870640222
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} + {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.003369793618121
module FIR_hp_3M_CSDMult_p003369793618121
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:5], in[15:11]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.002539390347445
module FIR_hp_3M_CSDMult_p002539390347445
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:7], in[15:9]} + {shiftSign[15:5], in[15:11]}) + ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001611322305837
module FIR_hp_3M_CSDMult_p001611322305837
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.000601247638630
module FIR_hp_3M_CSDMult_p000601247638630
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.000473563918050
module FIR_hp_3M_CSDMult_p000473563918050
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.001593657321957
module FIR_hp_3M_CSDMult_p001593657321957
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.002737177080669
module FIR_hp_3M_CSDMult_p002737177080669
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]}) - ({shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.003880036695260
module FIR_hp_3M_CSDMult_p003880036695260
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:8], in[15:8]} - {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.004998442408490
module FIR_hp_3M_CSDMult_p004998442408490
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} + {shiftSign[15:6], in[15:10]}) + ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.006066818206839
module FIR_hp_3M_CSDMult_p006066818206839
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} - {shiftSign[15:7], in[15:9]}) + ({shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.007060289580879
module FIR_hp_3M_CSDMult_p007060289580879
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} - {shiftSign[15:6], in[15:10]}) + ({shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.007952514757540
module FIR_hp_3M_CSDMult_p007952514757540
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:9], in[15:7]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.008719537053835
module FIR_hp_3M_CSDMult_p008719537053835
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} + {shiftSign[15:6], in[15:10]}) - ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.009336625351933
module FIR_hp_3M_CSDMult_p009336625351933
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} + {shiftSign[15:7], in[15:9]}) - ({shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.009782130944036
module FIR_hp_3M_CSDMult_p009782130944036
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:9], in[15:7]} + {shiftSign[15:7], in[15:9]};
endmodule

// CSD Multiplier for Coefficient 0.010035195664290
module FIR_hp_3M_CSDMult_p010035195664290
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:9], in[15:7]} + {shiftSign[15:7], in[15:9]} + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.010076780048862
module FIR_hp_3M_CSDMult_p010076780048862
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} + {shiftSign[15:7], in[15:9]}) + ({shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.009892477101017
module FIR_hp_3M_CSDMult_p009892477101017
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:9], in[15:7]} + {shiftSign[15:7], in[15:9]} + {shiftSign[15:3], in[15:13]};
endmodule

// CSD Multiplier for Coefficient 0.009469049637762
module FIR_hp_3M_CSDMult_p009469049637762
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} + {shiftSign[15:7], in[15:9]}) - ({shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.008797128063081
module FIR_hp_3M_CSDMult_p008797128063081
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:9], in[15:7]} + {shiftSign[15:6], in[15:10]};
endmodule

// CSD Multiplier for Coefficient 0.007871630391907
module FIR_hp_3M_CSDMult_p007871630391907
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:9], in[15:7]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.006690043389398
module FIR_hp_3M_CSDMult_p006690043389398
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} - {shiftSign[15:6], in[15:10]}) - ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.005255047717133
module FIR_hp_3M_CSDMult_p005255047717133
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:9], in[15:7]} - {shiftSign[15:7], in[15:9]}) - ({shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]});
endmodule

// CSD Multiplier for Coefficient 0.003572847464761
module FIR_hp_3M_CSDMult_p003572847464761
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:5], in[15:11]}) + ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.001652248529702
module FIR_hp_3M_CSDMult_p001652248529702
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:7], in[15:9]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.000492196465972
module FIR_hp_3M_CSDMult_p000492196465972
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.002842531708928
module FIR_hp_3M_CSDMult_p002842531708928
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:8], in[15:8]} - {shiftSign[15:6], in[15:10]}) - ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.005378052997361
module FIR_hp_3M_CSDMult_p005378052997361
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:9], in[15:7]} - {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.008073481473903
module FIR_hp_3M_CSDMult_p008073481473903
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:9], in[15:7]} + {shiftSign[15:4], in[15:12]};
endmodule

// CSD Multiplier for Coefficient 0.010901980979532
module FIR_hp_3M_CSDMult_p010901980979532
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:10], in[15:6]} - {shiftSign[15:8], in[15:8]}) - ({shiftSign[15:6], in[15:10]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.013833318121693
module FIR_hp_3M_CSDMult_p013833318121693
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:10], in[15:6]} - {shiftSign[15:7], in[15:9]}) + ({shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.016834228536721
module FIR_hp_3M_CSDMult_p016834228536721
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:10], in[15:6]} + {shiftSign[15:6], in[15:10]}) + ({shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.019871061855181
module FIR_hp_3M_CSDMult_p019871061855181
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:10], in[15:6]} + {shiftSign[15:8], in[15:8]}) + ({shiftSign[15:5], in[15:11]} - {shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.022907681087362
module FIR_hp_3M_CSDMult_p022907681087362
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:11], in[15:5]} - {shiftSign[15:9], in[15:7]}) - ({shiftSign[15:5], in[15:11]} + {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.025907685202249
module FIR_hp_3M_CSDMult_p025907685202249
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:11], in[15:5]} - {shiftSign[15:9], in[15:7]}) + ({shiftSign[15:7], in[15:9]} + {shiftSign[15:5], in[15:11]});
endmodule

// CSD Multiplier for Coefficient 0.028833775742233
module FIR_hp_3M_CSDMult_p028833775742233
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:11], in[15:5]} - {shiftSign[15:7], in[15:9]} - {shiftSign[15:5], in[15:11]};
endmodule

// CSD Multiplier for Coefficient 0.031650754888938
module FIR_hp_3M_CSDMult_p031650754888938
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:11], in[15:5]} + {shiftSign[15:5], in[15:11]}) - ({shiftSign[15:3], in[15:13]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.034322970686648
module FIR_hp_3M_CSDMult_p034322970686648
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:11], in[15:5]} + {shiftSign[15:8], in[15:8]}) - ({shiftSign[15:6], in[15:10]} - {shiftSign[15:3], in[15:13]});
endmodule

// CSD Multiplier for Coefficient 0.036816477657865
module FIR_hp_3M_CSDMult_p036816477657865
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:11], in[15:5]} + {shiftSign[15:9], in[15:7]}) - ({shiftSign[15:7], in[15:9]} + {shiftSign[15:4], in[15:12]} + {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.039099230128115
module FIR_hp_3M_CSDMult_p039099230128115
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:11], in[15:5]} + {shiftSign[15:9], in[15:7]} + {shiftSign[15:1], in[15:15]};
endmodule

// CSD Multiplier for Coefficient 0.041141956788989
module FIR_hp_3M_CSDMult_p041141956788989
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:11], in[15:5]} + {shiftSign[15:9], in[15:7]}) + ({shiftSign[15:7], in[15:9]} + {shiftSign[15:3], in[15:13]});
endmodule

// CSD Multiplier for Coefficient 0.042917866233768
module FIR_hp_3M_CSDMult_p042917866233768
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:12], in[15:4]} - {shiftSign[15:10], in[15:6]}) - ({shiftSign[15:8], in[15:8]} + {shiftSign[15:2], in[15:14]});
endmodule

// CSD Multiplier for Coefficient 0.044403893105783
module FIR_hp_3M_CSDMult_p044403893105783
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:12], in[15:4]} - {shiftSign[15:10], in[15:6]}) - ({shiftSign[15:7], in[15:9]} + {shiftSign[15:5], in[15:11]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.045580666550549
module FIR_hp_3M_CSDMult_p045580666550549
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:12], in[15:4]} - {shiftSign[15:10], in[15:6]} - {shiftSign[15:7], in[15:9]}) + ({shiftSign[15:5], in[15:11]} + {shiftSign[15:3], in[15:13]} + {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.046432576048994
module FIR_hp_3M_CSDMult_p046432576048994
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = ({shiftSign[15:12], in[15:4]} - {shiftSign[15:10], in[15:6]}) - ({shiftSign[15:5], in[15:11]} - {shiftSign[15:1], in[15:15]});
endmodule

// CSD Multiplier for Coefficient 0.046948160834813
module FIR_hp_3M_CSDMult_p046948160834813
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = + {shiftSign[15:12], in[15:4]} - {shiftSign[15:10], in[15:6]} + {shiftSign[15:2], in[15:14]};
endmodule

// CSD Multiplier for Coefficient 0.952879280278643
module FIR_hp_3M_CSDMult_p952879280278643
(
    input [15:0] in,
    output [15:0] out
);
    wire [15:0] shiftSign = (in[15] == 1'b0)? 16'b0 : - 16'b1;
    assign out = (in[15:0] - {shiftSign[15:12], in[15:4]}) + ({shiftSign[15:10], in[15:6]} - {shiftSign[15:4], in[15:12]} - {shiftSign[15:1], in[15:15]});
endmodule


module FIR_hp_3M
(
    input Clock,
    input ClkEn,
    input AsyncRst,
    input signed [15:0] In,
    output reg signed [15:0] Out
);

    reg signed [15:0] delay[669:0];
    wire signed [15:0] prod_0p010637157984332;
    wire signed [15:0] prod_0p010019109120374;
    wire signed [15:0] prod_0p005284442531356;
    wire signed [15:0] prod_0p002036304972377;
    wire signed [15:0] prod_0p000070661049161;
    wire signed [15:0] prod_0p001319160405792;
    wire signed [15:0] prod_0p001938034372603;
    wire signed [15:0] prod_0p002110906309105;
    wire signed [15:0] prod_0p001983139125333;
    wire signed [15:0] prod_0p001667739984795;
    wire signed [15:0] prod_0p001251350199643;
    wire signed [15:0] prod_0p000798395308804;
    wire signed [15:0] prod_0p000355031916952;
    wire signed [15:0] prod_0p000046927875400;
    wire signed [15:0] prod_0p000387502172574;
    wire signed [15:0] prod_0p000655794674816;
    wire signed [15:0] prod_0p000847932573919;
    wire signed [15:0] prod_0p000965537970318;
    wire signed [15:0] prod_0p001013951113230;
    wire signed [15:0] prod_0p001001118040788;
    wire signed [15:0] prod_0p000936378377169;
    wire signed [15:0] prod_0p000830187477825;
    wire signed [15:0] prod_0p000693074460695;
    wire signed [15:0] prod_0p000535083400629;
    wire signed [15:0] prod_0p000365686831791;
    wire signed [15:0] prod_0p000193448104945;
    wire signed [15:0] prod_0p000025887526338;
    wire signed [15:0] prod_0p000130751933239;
    wire signed [15:0] prod_0p000271403671133;
    wire signed [15:0] prod_0p000392189099473;
    wire signed [15:0] prod_0p000490421733888;
    wire signed [15:0] prod_0p000564537970177;
    wire signed [15:0] prod_0p000613888781739;
    wire signed [15:0] prod_0p000638804573678;
    wire signed [15:0] prod_0p000640204530451;
    wire signed [15:0] prod_0p000619885239071;
    wire signed [15:0] prod_0p000580010028728;
    wire signed [15:0] prod_0p000523059259547;
    wire signed [15:0] prod_0p000451852218996;
    wire signed [15:0] prod_0p000369468822649;
    wire signed [15:0] prod_0p000279049452148;
    wire signed [15:0] prod_0p000183521462318;
    wire signed [15:0] prod_0p000086004256734;
    wire signed [15:0] prod_0p000010592272627;
    wire signed [15:0] prod_0p000103843508644;
    wire signed [15:0] prod_0p000191216402380;
    wire signed [15:0] prod_0p000270905109505;
    wire signed [15:0] prod_0p000339972864915;
    wire signed [15:0] prod_0p000400632321268;
    wire signed [15:0] prod_0p000441431072757;
    wire signed [15:0] prod_0p000484676446652;
    wire signed [15:0] prod_0p000490267233623;
    wire signed [15:0] prod_0p000509565672488;
    wire signed [15:0] prod_0p000497383335527;
    wire signed [15:0] prod_0p000471940394081;
    wire signed [15:0] prod_0p000448351097771;
    wire signed [15:0] prod_0p000404963603142;
    wire signed [15:0] prod_0p000345878176474;
    wire signed [15:0] prod_0p000287745081791;
    wire signed [15:0] prod_0p000225446430378;
    wire signed [15:0] prod_0p000150723470046;
    wire signed [15:0] prod_0p000071121375746;
    wire signed [15:0] prod_0p000003777403829;
    wire signed [15:0] prod_0p000075698403024;
    wire signed [15:0] prod_0p000149939910081;
    wire signed [15:0] prod_0p000223580958635;
    wire signed [15:0] prod_0p000288914792923;
    wire signed [15:0] prod_0p000343368526417;
    wire signed [15:0] prod_0p000389998261604;
    wire signed [15:0] prod_0p000431003309979;
    wire signed [15:0] prod_0p000463493825448;
    wire signed [15:0] prod_0p000483068757652;
    wire signed [15:0] prod_0p000488511454582;
    wire signed [15:0] prod_0p000482267481818;
    wire signed [15:0] prod_0p000467123738818;
    wire signed [15:0] prod_0p000442871930003;
    wire signed [15:0] prod_0p000407557471672;
    wire signed [15:0] prod_0p000360252537365;
    wire signed [15:0] prod_0p000302753253499;
    wire signed [15:0] prod_0p000238278080506;
    wire signed [15:0] prod_0p000169541178580;
    wire signed [15:0] prod_0p000097509344623;
    wire signed [15:0] prod_0p000022120509649;
    wire signed [15:0] prod_0p000056301935159;
    wire signed [15:0] prod_0p000135582805604;
    wire signed [15:0] prod_0p000212519156837;
    wire signed [15:0] prod_0p000284114844126;
    wire signed [15:0] prod_0p000348713352137;
    wire signed [15:0] prod_0p000405932178706;
    wire signed [15:0] prod_0p000455545509093;
    wire signed [15:0] prod_0p000496663763067;
    wire signed [15:0] prod_0p000527552682583;
    wire signed [15:0] prod_0p000546377345845;
    wire signed [15:0] prod_0p000551824009197;
    wire signed [15:0] prod_0p000543631315911;
    wire signed [15:0] prod_0p000522974597703;
    wire signed [15:0] prod_0p000490443208993;
    wire signed [15:0] prod_0p000447656688014;
    wire signed [15:0] prod_0p000393004899282;
    wire signed [15:0] prod_0p000330917446534;
    wire signed [15:0] prod_0p000254860497985;
    wire signed [15:0] prod_0p000176622219239;
    wire signed [15:0] prod_0p000086409746424;
    wire signed [15:0] prod_0p000002890481197;
    wire signed [15:0] prod_0p000093543980808;
    wire signed [15:0] prod_0p000185949731817;
    wire signed [15:0] prod_0p000272002076543;
    wire signed [15:0] prod_0p000354867503494;
    wire signed [15:0] prod_0p000434043351066;
    wire signed [15:0] prod_0p000502812585862;
    wire signed [15:0] prod_0p000561667197245;
    wire signed [15:0] prod_0p000610825493074;
    wire signed [15:0] prod_0p000645098759781;
    wire signed [15:0] prod_0p000663278281370;
    wire signed [15:0] prod_0p000667866668977;
    wire signed [15:0] prod_0p000658271299037;
    wire signed [15:0] prod_0p000632374068889;
    wire signed [15:0] prod_0p000591322226063;
    wire signed [15:0] prod_0p000537746317635;
    wire signed [15:0] prod_0p000471134423591;
    wire signed [15:0] prod_0p000390681464090;
    wire signed [15:0] prod_0p000298650041500;
    wire signed [15:0] prod_0p000198566154554;
    wire signed [15:0] prod_0p000092337570728;
    wire signed [15:0] prod_0p000019081271535;
    wire signed [15:0] prod_0p000132578335336;
    wire signed [15:0] prod_0p000244360024508;
    wire signed [15:0] prod_0p000351928673573;
    wire signed [15:0] prod_0p000454313334118;
    wire signed [15:0] prod_0p000549708924911;
    wire signed [15:0] prod_0p000635048952155;
    wire signed [15:0] prod_0p000707198666647;
    wire signed [15:0] prod_0p000764505858335;
    wire signed [15:0] prod_0p000806032995820;
    wire signed [15:0] prod_0p000830477253542;
    wire signed [15:0] prod_0p000835879311207;
    wire signed [15:0] prod_0p000821300911915;
    wire signed [15:0] prod_0p000787475573779;
    wire signed [15:0] prod_0p000735652495995;
    wire signed [15:0] prod_0p000666682697453;
    wire signed [15:0] prod_0p000581124967296;
    wire signed [15:0] prod_0p000480114418238;
    wire signed [15:0] prod_0p000365722988386;
    wire signed [15:0] prod_0p000240602970550;
    wire signed [15:0] prod_0p000107443809606;
    wire signed [15:0] prod_0p000031631782474;
    wire signed [15:0] prod_0p000173425118704;
    wire signed [15:0] prod_0p000315407463963;
    wire signed [15:0] prod_0p000452437109362;
    wire signed [15:0] prod_0p000582952941516;
    wire signed [15:0] prod_0p000700324503472;
    wire signed [15:0] prod_0p000806886523648;
    wire signed [15:0] prod_0p000895347907654;
    wire signed [15:0] prod_0p000967277173120;
    wire signed [15:0] prod_0p001018750148792;
    wire signed [15:0] prod_0p001046876942412;
    wire signed [15:0] prod_0p001053522469621;
    wire signed [15:0] prod_0p001035722549540;
    wire signed [15:0] prod_0p000993790868210;
    wire signed [15:0] prod_0p000929812611981;
    wire signed [15:0] prod_0p000842026186571;
    wire signed [15:0] prod_0p000732018995810;
    wire signed [15:0] prod_0p000603729341322;
    wire signed [15:0] prod_0p000458468120234;
    wire signed [15:0] prod_0p000299385224793;
    wire signed [15:0] prod_0p000131186631082;
    wire signed [15:0] prod_0p000043611672557;
    wire signed [15:0] prod_0p000222167191164;
    wire signed [15:0] prod_0p000399770088819;
    wire signed [15:0] prod_0p000571717728426;
    wire signed [15:0] prod_0p000734969021613;
    wire signed [15:0] prod_0p000885778977877;
    wire signed [15:0] prod_0p001019515232348;
    wire signed [15:0] prod_0p001133364014002;
    wire signed [15:0] prod_0p001224992952329;
    wire signed [15:0] prod_0p001291460944742;
    wire signed [15:0] prod_0p001329292244818;
    wire signed [15:0] prod_0p001337262753940;
    wire signed [15:0] prod_0p001315301014142;
    wire signed [15:0] prod_0p001263232728687;
    wire signed [15:0] prod_0p001181021453257;
    wire signed [15:0] prod_0p001070376741302;
    wire signed [15:0] prod_0p000933715488556;
    wire signed [15:0] prod_0p000773177826181;
    wire signed [15:0] prod_0p000591012514049;
    wire signed [15:0] prod_0p000390942745603;
    wire signed [15:0] prod_0p000177649657508;
    wire signed [15:0] prod_0p000044288172742;
    wire signed [15:0] prod_0p000270460824857;
    wire signed [15:0] prod_0p000496245017214;
    wire signed [15:0] prod_0p000716372841401;
    wire signed [15:0] prod_0p000925419102546;
    wire signed [15:0] prod_0p001118577493783;
    wire signed [15:0] prod_0p001291330025415;
    wire signed [15:0] prod_0p001439035403261;
    wire signed [15:0] prod_0p001556940333362;
    wire signed [15:0] prod_0p001642241407582;
    wire signed [15:0] prod_0p001692195353790;
    wire signed [15:0] prod_0p001706187280388;
    wire signed [15:0] prod_0p001681431670775;
    wire signed [15:0] prod_0p001619284984364;
    wire signed [15:0] prod_0p001517743750544;
    wire signed [15:0] prod_0p001381168029941;
    wire signed [15:0] prod_0p001209765049681;
    wire signed [15:0] prod_0p001006862218609;
    wire signed [15:0] prod_0p000777015943843;
    wire signed [15:0] prod_0p000523127142025;
    wire signed [15:0] prod_0p000251975066314;
    wire signed [15:0] prod_0p000031080014503;
    wire signed [15:0] prod_0p000321139029943;
    wire signed [15:0] prod_0p000610649036597;
    wire signed [15:0] prod_0p000893796082537;
    wire signed [15:0] prod_0p001164389963439;
    wire signed [15:0] prod_0p001414365093299;
    wire signed [15:0] prod_0p001638381515244;
    wire signed [15:0] prod_0p001831566636285;
    wire signed [15:0] prod_0p001987898865603;
    wire signed [15:0] prod_0p002103507151916;
    wire signed [15:0] prod_0p002175168552813;
    wire signed [15:0] prod_0p002199770831104;
    wire signed [15:0] prod_0p002175440181160;
    wire signed [15:0] prod_0p002101963600273;
    wire signed [15:0] prod_0p001979811199855;
    wire signed [15:0] prod_0p001809551714876;
    wire signed [15:0] prod_0p001594324038229;
    wire signed [15:0] prod_0p001337907401144;
    wire signed [15:0] prod_0p001044986969926;
    wire signed [15:0] prod_0p000720936790405;
    wire signed [15:0] prod_0p000372663219595;
    wire signed [15:0] prod_0p000007001844772;
    wire signed [15:0] prod_0p000368882744022;
    wire signed [15:0] prod_0p000746778118645;
    wire signed [15:0] prod_0p001117449265058;
    wire signed [15:0] prod_0p001472420714525;
    wire signed [15:0] prod_0p001803862365738;
    wire signed [15:0] prod_0p002103735783255;
    wire signed [15:0] prod_0p002364113902335;
    wire signed [15:0] prod_0p002578322327590;
    wire signed [15:0] prod_0p002740811241672;
    wire signed [15:0] prod_0p002846303958176;
    wire signed [15:0] prod_0p002890614994053;
    wire signed [15:0] prod_0p002871497292782;
    wire signed [15:0] prod_0p002787952256151;
    wire signed [15:0] prod_0p002639892046411;
    wire signed [15:0] prod_0p002428269823898;
    wire signed [15:0] prod_0p002156085890105;
    wire signed [15:0] prod_0p001827558953831;
    wire signed [15:0] prod_0p001449300037894;
    wire signed [15:0] prod_0p001027386341700;
    wire signed [15:0] prod_0p000570625036045;
    wire signed [15:0] prod_0p000086962818785;
    wire signed [15:0] prod_0p000411954263558;
    wire signed [15:0] prod_0p000917272484268;
    wire signed [15:0] prod_0p001416954155502;
    wire signed [15:0] prod_0p001899777694938;
    wire signed [15:0] prod_0p002354984692705;
    wire signed [15:0] prod_0p002770428314490;
    wire signed [15:0] prod_0p003137070223319;
    wire signed [15:0] prod_0p003445273826937;
    wire signed [15:0] prod_0p003685379144415;
    wire signed [15:0] prod_0p003850764675840;
    wire signed [15:0] prod_0p003935070187112;
    wire signed [15:0] prod_0p003933736529200;
    wire signed [15:0] prod_0p003844919574787;
    wire signed [15:0] prod_0p003666797847893;
    wire signed [15:0] prod_0p003400400862952;
    wire signed [15:0] prod_0p003049560226168;
    wire signed [15:0] prod_0p002618057264245;
    wire signed [15:0] prod_0p002112681056194;
    wire signed [15:0] prod_0p001542382737727;
    wire signed [15:0] prod_0p000917173150631;
    wire signed [15:0] prod_0p000249167461179;
    wire signed [15:0] prod_0p000448290544196;
    wire signed [15:0] prod_0p001160615730861;
    wire signed [15:0] prod_0p001873721622746;
    wire signed [15:0] prod_0p002571438364894;
    wire signed [15:0] prod_0p003237763645681;
    wire signed [15:0] prod_0p003856759618712;
    wire signed [15:0] prod_0p004413280766291;
    wire signed [15:0] prod_0p004892449363129;
    wire signed [15:0] prod_0p005280931661260;
    wire signed [15:0] prod_0p005566738520437;
    wire signed [15:0] prod_0p005739372782409;
    wire signed [15:0] prod_0p005790170882407;
    wire signed [15:0] prod_0p005713131084910;
    wire signed [15:0] prod_0p005504612562743;
    wire signed [15:0] prod_0p005163120251677;
    wire signed [15:0] prod_0p004690032646217;
    wire signed [15:0] prod_0p004089870640222;
    wire signed [15:0] prod_0p003369793618121;
    wire signed [15:0] prod_0p002539390347445;
    wire signed [15:0] prod_0p001611322305837;
    wire signed [15:0] prod_0p000601247638630;
    wire signed [15:0] prod_0p000473563918050;
    wire signed [15:0] prod_0p001593657321957;
    wire signed [15:0] prod_0p002737177080669;
    wire signed [15:0] prod_0p003880036695260;
    wire signed [15:0] prod_0p004998442408490;
    wire signed [15:0] prod_0p006066818206839;
    wire signed [15:0] prod_0p007060289580879;
    wire signed [15:0] prod_0p007952514757540;
    wire signed [15:0] prod_0p008719537053835;
    wire signed [15:0] prod_0p009336625351933;
    wire signed [15:0] prod_0p009782130944036;
    wire signed [15:0] prod_0p010035195664290;
    wire signed [15:0] prod_0p010076780048862;
    wire signed [15:0] prod_0p009892477101017;
    wire signed [15:0] prod_0p009469049637762;
    wire signed [15:0] prod_0p008797128063081;
    wire signed [15:0] prod_0p007871630391907;
    wire signed [15:0] prod_0p006690043389398;
    wire signed [15:0] prod_0p005255047717133;
    wire signed [15:0] prod_0p003572847464761;
    wire signed [15:0] prod_0p001652248529702;
    wire signed [15:0] prod_0p000492196465972;
    wire signed [15:0] prod_0p002842531708928;
    wire signed [15:0] prod_0p005378052997361;
    wire signed [15:0] prod_0p008073481473903;
    wire signed [15:0] prod_0p010901980979532;
    wire signed [15:0] prod_0p013833318121693;
    wire signed [15:0] prod_0p016834228536721;
    wire signed [15:0] prod_0p019871061855181;
    wire signed [15:0] prod_0p022907681087362;
    wire signed [15:0] prod_0p025907685202249;
    wire signed [15:0] prod_0p028833775742233;
    wire signed [15:0] prod_0p031650754888938;
    wire signed [15:0] prod_0p034322970686648;
    wire signed [15:0] prod_0p036816477657865;
    wire signed [15:0] prod_0p039099230128115;
    wire signed [15:0] prod_0p041141956788989;
    wire signed [15:0] prod_0p042917866233768;
    wire signed [15:0] prod_0p044403893105783;
    wire signed [15:0] prod_0p045580666550549;
    wire signed [15:0] prod_0p046432576048994;
    wire signed [15:0] prod_0p046948160834813;
    wire signed [15:0] prod_0p952879280278643;

    FIR_hp_3M_CSDMult_p010637157984332 mult0p010637157984332(In, prod_0p010637157984332);
    FIR_hp_3M_CSDMult_p010019109120374 mult0p010019109120374(In, prod_0p010019109120374);
    FIR_hp_3M_CSDMult_p005284442531356 mult0p005284442531356(In, prod_0p005284442531356);
    FIR_hp_3M_CSDMult_p002036304972377 mult0p002036304972377(In, prod_0p002036304972377);
    FIR_hp_3M_CSDMult_p000070661049161 mult0p000070661049161(In, prod_0p000070661049161);
    FIR_hp_3M_CSDMult_p001319160405792 mult0p001319160405792(In, prod_0p001319160405792);
    FIR_hp_3M_CSDMult_p001938034372603 mult0p001938034372603(In, prod_0p001938034372603);
    FIR_hp_3M_CSDMult_p002110906309105 mult0p002110906309105(In, prod_0p002110906309105);
    FIR_hp_3M_CSDMult_p001983139125333 mult0p001983139125333(In, prod_0p001983139125333);
    FIR_hp_3M_CSDMult_p001667739984795 mult0p001667739984795(In, prod_0p001667739984795);
    FIR_hp_3M_CSDMult_p001251350199643 mult0p001251350199643(In, prod_0p001251350199643);
    FIR_hp_3M_CSDMult_p000798395308804 mult0p000798395308804(In, prod_0p000798395308804);
    FIR_hp_3M_CSDMult_p000355031916952 mult0p000355031916952(In, prod_0p000355031916952);
    FIR_hp_3M_CSDMult_p000046927875400 mult0p000046927875400(In, prod_0p000046927875400);
    FIR_hp_3M_CSDMult_p000387502172574 mult0p000387502172574(In, prod_0p000387502172574);
    FIR_hp_3M_CSDMult_p000655794674816 mult0p000655794674816(In, prod_0p000655794674816);
    FIR_hp_3M_CSDMult_p000847932573919 mult0p000847932573919(In, prod_0p000847932573919);
    FIR_hp_3M_CSDMult_p000965537970318 mult0p000965537970318(In, prod_0p000965537970318);
    FIR_hp_3M_CSDMult_p001013951113230 mult0p001013951113230(In, prod_0p001013951113230);
    FIR_hp_3M_CSDMult_p001001118040788 mult0p001001118040788(In, prod_0p001001118040788);
    FIR_hp_3M_CSDMult_p000936378377169 mult0p000936378377169(In, prod_0p000936378377169);
    FIR_hp_3M_CSDMult_p000830187477825 mult0p000830187477825(In, prod_0p000830187477825);
    FIR_hp_3M_CSDMult_p000693074460695 mult0p000693074460695(In, prod_0p000693074460695);
    FIR_hp_3M_CSDMult_p000535083400629 mult0p000535083400629(In, prod_0p000535083400629);
    FIR_hp_3M_CSDMult_p000365686831791 mult0p000365686831791(In, prod_0p000365686831791);
    FIR_hp_3M_CSDMult_p000193448104945 mult0p000193448104945(In, prod_0p000193448104945);
    FIR_hp_3M_CSDMult_p000025887526338 mult0p000025887526338(In, prod_0p000025887526338);
    FIR_hp_3M_CSDMult_p000130751933239 mult0p000130751933239(In, prod_0p000130751933239);
    FIR_hp_3M_CSDMult_p000271403671133 mult0p000271403671133(In, prod_0p000271403671133);
    FIR_hp_3M_CSDMult_p000392189099473 mult0p000392189099473(In, prod_0p000392189099473);
    FIR_hp_3M_CSDMult_p000490421733888 mult0p000490421733888(In, prod_0p000490421733888);
    FIR_hp_3M_CSDMult_p000564537970177 mult0p000564537970177(In, prod_0p000564537970177);
    FIR_hp_3M_CSDMult_p000613888781739 mult0p000613888781739(In, prod_0p000613888781739);
    FIR_hp_3M_CSDMult_p000638804573678 mult0p000638804573678(In, prod_0p000638804573678);
    FIR_hp_3M_CSDMult_p000640204530451 mult0p000640204530451(In, prod_0p000640204530451);
    FIR_hp_3M_CSDMult_p000619885239071 mult0p000619885239071(In, prod_0p000619885239071);
    FIR_hp_3M_CSDMult_p000580010028728 mult0p000580010028728(In, prod_0p000580010028728);
    FIR_hp_3M_CSDMult_p000523059259547 mult0p000523059259547(In, prod_0p000523059259547);
    FIR_hp_3M_CSDMult_p000451852218996 mult0p000451852218996(In, prod_0p000451852218996);
    FIR_hp_3M_CSDMult_p000369468822649 mult0p000369468822649(In, prod_0p000369468822649);
    FIR_hp_3M_CSDMult_p000279049452148 mult0p000279049452148(In, prod_0p000279049452148);
    FIR_hp_3M_CSDMult_p000183521462318 mult0p000183521462318(In, prod_0p000183521462318);
    FIR_hp_3M_CSDMult_p000086004256734 mult0p000086004256734(In, prod_0p000086004256734);
    FIR_hp_3M_CSDMult_p000010592272627 mult0p000010592272627(In, prod_0p000010592272627);
    FIR_hp_3M_CSDMult_p000103843508644 mult0p000103843508644(In, prod_0p000103843508644);
    FIR_hp_3M_CSDMult_p000191216402380 mult0p000191216402380(In, prod_0p000191216402380);
    FIR_hp_3M_CSDMult_p000270905109505 mult0p000270905109505(In, prod_0p000270905109505);
    FIR_hp_3M_CSDMult_p000339972864915 mult0p000339972864915(In, prod_0p000339972864915);
    FIR_hp_3M_CSDMult_p000400632321268 mult0p000400632321268(In, prod_0p000400632321268);
    FIR_hp_3M_CSDMult_p000441431072757 mult0p000441431072757(In, prod_0p000441431072757);
    FIR_hp_3M_CSDMult_p000484676446652 mult0p000484676446652(In, prod_0p000484676446652);
    FIR_hp_3M_CSDMult_p000490267233623 mult0p000490267233623(In, prod_0p000490267233623);
    FIR_hp_3M_CSDMult_p000509565672488 mult0p000509565672488(In, prod_0p000509565672488);
    FIR_hp_3M_CSDMult_p000497383335527 mult0p000497383335527(In, prod_0p000497383335527);
    FIR_hp_3M_CSDMult_p000471940394081 mult0p000471940394081(In, prod_0p000471940394081);
    FIR_hp_3M_CSDMult_p000448351097771 mult0p000448351097771(In, prod_0p000448351097771);
    FIR_hp_3M_CSDMult_p000404963603142 mult0p000404963603142(In, prod_0p000404963603142);
    FIR_hp_3M_CSDMult_p000345878176474 mult0p000345878176474(In, prod_0p000345878176474);
    FIR_hp_3M_CSDMult_p000287745081791 mult0p000287745081791(In, prod_0p000287745081791);
    FIR_hp_3M_CSDMult_p000225446430378 mult0p000225446430378(In, prod_0p000225446430378);
    FIR_hp_3M_CSDMult_p000150723470046 mult0p000150723470046(In, prod_0p000150723470046);
    FIR_hp_3M_CSDMult_p000071121375746 mult0p000071121375746(In, prod_0p000071121375746);
    FIR_hp_3M_CSDMult_p000003777403829 mult0p000003777403829(In, prod_0p000003777403829);
    FIR_hp_3M_CSDMult_p000075698403024 mult0p000075698403024(In, prod_0p000075698403024);
    FIR_hp_3M_CSDMult_p000149939910081 mult0p000149939910081(In, prod_0p000149939910081);
    FIR_hp_3M_CSDMult_p000223580958635 mult0p000223580958635(In, prod_0p000223580958635);
    FIR_hp_3M_CSDMult_p000288914792923 mult0p000288914792923(In, prod_0p000288914792923);
    FIR_hp_3M_CSDMult_p000343368526417 mult0p000343368526417(In, prod_0p000343368526417);
    FIR_hp_3M_CSDMult_p000389998261604 mult0p000389998261604(In, prod_0p000389998261604);
    FIR_hp_3M_CSDMult_p000431003309979 mult0p000431003309979(In, prod_0p000431003309979);
    FIR_hp_3M_CSDMult_p000463493825448 mult0p000463493825448(In, prod_0p000463493825448);
    FIR_hp_3M_CSDMult_p000483068757652 mult0p000483068757652(In, prod_0p000483068757652);
    FIR_hp_3M_CSDMult_p000488511454582 mult0p000488511454582(In, prod_0p000488511454582);
    FIR_hp_3M_CSDMult_p000482267481818 mult0p000482267481818(In, prod_0p000482267481818);
    FIR_hp_3M_CSDMult_p000467123738818 mult0p000467123738818(In, prod_0p000467123738818);
    FIR_hp_3M_CSDMult_p000442871930003 mult0p000442871930003(In, prod_0p000442871930003);
    FIR_hp_3M_CSDMult_p000407557471672 mult0p000407557471672(In, prod_0p000407557471672);
    FIR_hp_3M_CSDMult_p000360252537365 mult0p000360252537365(In, prod_0p000360252537365);
    FIR_hp_3M_CSDMult_p000302753253499 mult0p000302753253499(In, prod_0p000302753253499);
    FIR_hp_3M_CSDMult_p000238278080506 mult0p000238278080506(In, prod_0p000238278080506);
    FIR_hp_3M_CSDMult_p000169541178580 mult0p000169541178580(In, prod_0p000169541178580);
    FIR_hp_3M_CSDMult_p000097509344623 mult0p000097509344623(In, prod_0p000097509344623);
    FIR_hp_3M_CSDMult_p000022120509649 mult0p000022120509649(In, prod_0p000022120509649);
    FIR_hp_3M_CSDMult_p000056301935159 mult0p000056301935159(In, prod_0p000056301935159);
    FIR_hp_3M_CSDMult_p000135582805604 mult0p000135582805604(In, prod_0p000135582805604);
    FIR_hp_3M_CSDMult_p000212519156837 mult0p000212519156837(In, prod_0p000212519156837);
    FIR_hp_3M_CSDMult_p000284114844126 mult0p000284114844126(In, prod_0p000284114844126);
    FIR_hp_3M_CSDMult_p000348713352137 mult0p000348713352137(In, prod_0p000348713352137);
    FIR_hp_3M_CSDMult_p000405932178706 mult0p000405932178706(In, prod_0p000405932178706);
    FIR_hp_3M_CSDMult_p000455545509093 mult0p000455545509093(In, prod_0p000455545509093);
    FIR_hp_3M_CSDMult_p000496663763067 mult0p000496663763067(In, prod_0p000496663763067);
    FIR_hp_3M_CSDMult_p000527552682583 mult0p000527552682583(In, prod_0p000527552682583);
    FIR_hp_3M_CSDMult_p000546377345845 mult0p000546377345845(In, prod_0p000546377345845);
    FIR_hp_3M_CSDMult_p000551824009197 mult0p000551824009197(In, prod_0p000551824009197);
    FIR_hp_3M_CSDMult_p000543631315911 mult0p000543631315911(In, prod_0p000543631315911);
    FIR_hp_3M_CSDMult_p000522974597703 mult0p000522974597703(In, prod_0p000522974597703);
    FIR_hp_3M_CSDMult_p000490443208993 mult0p000490443208993(In, prod_0p000490443208993);
    FIR_hp_3M_CSDMult_p000447656688014 mult0p000447656688014(In, prod_0p000447656688014);
    FIR_hp_3M_CSDMult_p000393004899282 mult0p000393004899282(In, prod_0p000393004899282);
    FIR_hp_3M_CSDMult_p000330917446534 mult0p000330917446534(In, prod_0p000330917446534);
    FIR_hp_3M_CSDMult_p000254860497985 mult0p000254860497985(In, prod_0p000254860497985);
    FIR_hp_3M_CSDMult_p000176622219239 mult0p000176622219239(In, prod_0p000176622219239);
    FIR_hp_3M_CSDMult_p000086409746424 mult0p000086409746424(In, prod_0p000086409746424);
    FIR_hp_3M_CSDMult_p000002890481197 mult0p000002890481197(In, prod_0p000002890481197);
    FIR_hp_3M_CSDMult_p000093543980808 mult0p000093543980808(In, prod_0p000093543980808);
    FIR_hp_3M_CSDMult_p000185949731817 mult0p000185949731817(In, prod_0p000185949731817);
    FIR_hp_3M_CSDMult_p000272002076543 mult0p000272002076543(In, prod_0p000272002076543);
    FIR_hp_3M_CSDMult_p000354867503494 mult0p000354867503494(In, prod_0p000354867503494);
    FIR_hp_3M_CSDMult_p000434043351066 mult0p000434043351066(In, prod_0p000434043351066);
    FIR_hp_3M_CSDMult_p000502812585862 mult0p000502812585862(In, prod_0p000502812585862);
    FIR_hp_3M_CSDMult_p000561667197245 mult0p000561667197245(In, prod_0p000561667197245);
    FIR_hp_3M_CSDMult_p000610825493074 mult0p000610825493074(In, prod_0p000610825493074);
    FIR_hp_3M_CSDMult_p000645098759781 mult0p000645098759781(In, prod_0p000645098759781);
    FIR_hp_3M_CSDMult_p000663278281370 mult0p000663278281370(In, prod_0p000663278281370);
    FIR_hp_3M_CSDMult_p000667866668977 mult0p000667866668977(In, prod_0p000667866668977);
    FIR_hp_3M_CSDMult_p000658271299037 mult0p000658271299037(In, prod_0p000658271299037);
    FIR_hp_3M_CSDMult_p000632374068889 mult0p000632374068889(In, prod_0p000632374068889);
    FIR_hp_3M_CSDMult_p000591322226063 mult0p000591322226063(In, prod_0p000591322226063);
    FIR_hp_3M_CSDMult_p000537746317635 mult0p000537746317635(In, prod_0p000537746317635);
    FIR_hp_3M_CSDMult_p000471134423591 mult0p000471134423591(In, prod_0p000471134423591);
    FIR_hp_3M_CSDMult_p000390681464090 mult0p000390681464090(In, prod_0p000390681464090);
    FIR_hp_3M_CSDMult_p000298650041500 mult0p000298650041500(In, prod_0p000298650041500);
    FIR_hp_3M_CSDMult_p000198566154554 mult0p000198566154554(In, prod_0p000198566154554);
    FIR_hp_3M_CSDMult_p000092337570728 mult0p000092337570728(In, prod_0p000092337570728);
    FIR_hp_3M_CSDMult_p000019081271535 mult0p000019081271535(In, prod_0p000019081271535);
    FIR_hp_3M_CSDMult_p000132578335336 mult0p000132578335336(In, prod_0p000132578335336);
    FIR_hp_3M_CSDMult_p000244360024508 mult0p000244360024508(In, prod_0p000244360024508);
    FIR_hp_3M_CSDMult_p000351928673573 mult0p000351928673573(In, prod_0p000351928673573);
    FIR_hp_3M_CSDMult_p000454313334118 mult0p000454313334118(In, prod_0p000454313334118);
    FIR_hp_3M_CSDMult_p000549708924911 mult0p000549708924911(In, prod_0p000549708924911);
    FIR_hp_3M_CSDMult_p000635048952155 mult0p000635048952155(In, prod_0p000635048952155);
    FIR_hp_3M_CSDMult_p000707198666647 mult0p000707198666647(In, prod_0p000707198666647);
    FIR_hp_3M_CSDMult_p000764505858335 mult0p000764505858335(In, prod_0p000764505858335);
    FIR_hp_3M_CSDMult_p000806032995820 mult0p000806032995820(In, prod_0p000806032995820);
    FIR_hp_3M_CSDMult_p000830477253542 mult0p000830477253542(In, prod_0p000830477253542);
    FIR_hp_3M_CSDMult_p000835879311207 mult0p000835879311207(In, prod_0p000835879311207);
    FIR_hp_3M_CSDMult_p000821300911915 mult0p000821300911915(In, prod_0p000821300911915);
    FIR_hp_3M_CSDMult_p000787475573779 mult0p000787475573779(In, prod_0p000787475573779);
    FIR_hp_3M_CSDMult_p000735652495995 mult0p000735652495995(In, prod_0p000735652495995);
    FIR_hp_3M_CSDMult_p000666682697453 mult0p000666682697453(In, prod_0p000666682697453);
    FIR_hp_3M_CSDMult_p000581124967296 mult0p000581124967296(In, prod_0p000581124967296);
    FIR_hp_3M_CSDMult_p000480114418238 mult0p000480114418238(In, prod_0p000480114418238);
    FIR_hp_3M_CSDMult_p000365722988386 mult0p000365722988386(In, prod_0p000365722988386);
    FIR_hp_3M_CSDMult_p000240602970550 mult0p000240602970550(In, prod_0p000240602970550);
    FIR_hp_3M_CSDMult_p000107443809606 mult0p000107443809606(In, prod_0p000107443809606);
    FIR_hp_3M_CSDMult_p000031631782474 mult0p000031631782474(In, prod_0p000031631782474);
    FIR_hp_3M_CSDMult_p000173425118704 mult0p000173425118704(In, prod_0p000173425118704);
    FIR_hp_3M_CSDMult_p000315407463963 mult0p000315407463963(In, prod_0p000315407463963);
    FIR_hp_3M_CSDMult_p000452437109362 mult0p000452437109362(In, prod_0p000452437109362);
    FIR_hp_3M_CSDMult_p000582952941516 mult0p000582952941516(In, prod_0p000582952941516);
    FIR_hp_3M_CSDMult_p000700324503472 mult0p000700324503472(In, prod_0p000700324503472);
    FIR_hp_3M_CSDMult_p000806886523648 mult0p000806886523648(In, prod_0p000806886523648);
    FIR_hp_3M_CSDMult_p000895347907654 mult0p000895347907654(In, prod_0p000895347907654);
    FIR_hp_3M_CSDMult_p000967277173120 mult0p000967277173120(In, prod_0p000967277173120);
    FIR_hp_3M_CSDMult_p001018750148792 mult0p001018750148792(In, prod_0p001018750148792);
    FIR_hp_3M_CSDMult_p001046876942412 mult0p001046876942412(In, prod_0p001046876942412);
    FIR_hp_3M_CSDMult_p001053522469621 mult0p001053522469621(In, prod_0p001053522469621);
    FIR_hp_3M_CSDMult_p001035722549540 mult0p001035722549540(In, prod_0p001035722549540);
    FIR_hp_3M_CSDMult_p000993790868210 mult0p000993790868210(In, prod_0p000993790868210);
    FIR_hp_3M_CSDMult_p000929812611981 mult0p000929812611981(In, prod_0p000929812611981);
    FIR_hp_3M_CSDMult_p000842026186571 mult0p000842026186571(In, prod_0p000842026186571);
    FIR_hp_3M_CSDMult_p000732018995810 mult0p000732018995810(In, prod_0p000732018995810);
    FIR_hp_3M_CSDMult_p000603729341322 mult0p000603729341322(In, prod_0p000603729341322);
    FIR_hp_3M_CSDMult_p000458468120234 mult0p000458468120234(In, prod_0p000458468120234);
    FIR_hp_3M_CSDMult_p000299385224793 mult0p000299385224793(In, prod_0p000299385224793);
    FIR_hp_3M_CSDMult_p000131186631082 mult0p000131186631082(In, prod_0p000131186631082);
    FIR_hp_3M_CSDMult_p000043611672557 mult0p000043611672557(In, prod_0p000043611672557);
    FIR_hp_3M_CSDMult_p000222167191164 mult0p000222167191164(In, prod_0p000222167191164);
    FIR_hp_3M_CSDMult_p000399770088819 mult0p000399770088819(In, prod_0p000399770088819);
    FIR_hp_3M_CSDMult_p000571717728426 mult0p000571717728426(In, prod_0p000571717728426);
    FIR_hp_3M_CSDMult_p000734969021613 mult0p000734969021613(In, prod_0p000734969021613);
    FIR_hp_3M_CSDMult_p000885778977877 mult0p000885778977877(In, prod_0p000885778977877);
    FIR_hp_3M_CSDMult_p001019515232348 mult0p001019515232348(In, prod_0p001019515232348);
    FIR_hp_3M_CSDMult_p001133364014002 mult0p001133364014002(In, prod_0p001133364014002);
    FIR_hp_3M_CSDMult_p001224992952329 mult0p001224992952329(In, prod_0p001224992952329);
    FIR_hp_3M_CSDMult_p001291460944742 mult0p001291460944742(In, prod_0p001291460944742);
    FIR_hp_3M_CSDMult_p001329292244818 mult0p001329292244818(In, prod_0p001329292244818);
    FIR_hp_3M_CSDMult_p001337262753940 mult0p001337262753940(In, prod_0p001337262753940);
    FIR_hp_3M_CSDMult_p001315301014142 mult0p001315301014142(In, prod_0p001315301014142);
    FIR_hp_3M_CSDMult_p001263232728687 mult0p001263232728687(In, prod_0p001263232728687);
    FIR_hp_3M_CSDMult_p001181021453257 mult0p001181021453257(In, prod_0p001181021453257);
    FIR_hp_3M_CSDMult_p001070376741302 mult0p001070376741302(In, prod_0p001070376741302);
    FIR_hp_3M_CSDMult_p000933715488556 mult0p000933715488556(In, prod_0p000933715488556);
    FIR_hp_3M_CSDMult_p000773177826181 mult0p000773177826181(In, prod_0p000773177826181);
    FIR_hp_3M_CSDMult_p000591012514049 mult0p000591012514049(In, prod_0p000591012514049);
    FIR_hp_3M_CSDMult_p000390942745603 mult0p000390942745603(In, prod_0p000390942745603);
    FIR_hp_3M_CSDMult_p000177649657508 mult0p000177649657508(In, prod_0p000177649657508);
    FIR_hp_3M_CSDMult_p000044288172742 mult0p000044288172742(In, prod_0p000044288172742);
    FIR_hp_3M_CSDMult_p000270460824857 mult0p000270460824857(In, prod_0p000270460824857);
    FIR_hp_3M_CSDMult_p000496245017214 mult0p000496245017214(In, prod_0p000496245017214);
    FIR_hp_3M_CSDMult_p000716372841401 mult0p000716372841401(In, prod_0p000716372841401);
    FIR_hp_3M_CSDMult_p000925419102546 mult0p000925419102546(In, prod_0p000925419102546);
    FIR_hp_3M_CSDMult_p001118577493783 mult0p001118577493783(In, prod_0p001118577493783);
    FIR_hp_3M_CSDMult_p001291330025415 mult0p001291330025415(In, prod_0p001291330025415);
    FIR_hp_3M_CSDMult_p001439035403261 mult0p001439035403261(In, prod_0p001439035403261);
    FIR_hp_3M_CSDMult_p001556940333362 mult0p001556940333362(In, prod_0p001556940333362);
    FIR_hp_3M_CSDMult_p001642241407582 mult0p001642241407582(In, prod_0p001642241407582);
    FIR_hp_3M_CSDMult_p001692195353790 mult0p001692195353790(In, prod_0p001692195353790);
    FIR_hp_3M_CSDMult_p001706187280388 mult0p001706187280388(In, prod_0p001706187280388);
    FIR_hp_3M_CSDMult_p001681431670775 mult0p001681431670775(In, prod_0p001681431670775);
    FIR_hp_3M_CSDMult_p001619284984364 mult0p001619284984364(In, prod_0p001619284984364);
    FIR_hp_3M_CSDMult_p001517743750544 mult0p001517743750544(In, prod_0p001517743750544);
    FIR_hp_3M_CSDMult_p001381168029941 mult0p001381168029941(In, prod_0p001381168029941);
    FIR_hp_3M_CSDMult_p001209765049681 mult0p001209765049681(In, prod_0p001209765049681);
    FIR_hp_3M_CSDMult_p001006862218609 mult0p001006862218609(In, prod_0p001006862218609);
    FIR_hp_3M_CSDMult_p000777015943843 mult0p000777015943843(In, prod_0p000777015943843);
    FIR_hp_3M_CSDMult_p000523127142025 mult0p000523127142025(In, prod_0p000523127142025);
    FIR_hp_3M_CSDMult_p000251975066314 mult0p000251975066314(In, prod_0p000251975066314);
    FIR_hp_3M_CSDMult_p000031080014503 mult0p000031080014503(In, prod_0p000031080014503);
    FIR_hp_3M_CSDMult_p000321139029943 mult0p000321139029943(In, prod_0p000321139029943);
    FIR_hp_3M_CSDMult_p000610649036597 mult0p000610649036597(In, prod_0p000610649036597);
    FIR_hp_3M_CSDMult_p000893796082537 mult0p000893796082537(In, prod_0p000893796082537);
    FIR_hp_3M_CSDMult_p001164389963439 mult0p001164389963439(In, prod_0p001164389963439);
    FIR_hp_3M_CSDMult_p001414365093299 mult0p001414365093299(In, prod_0p001414365093299);
    FIR_hp_3M_CSDMult_p001638381515244 mult0p001638381515244(In, prod_0p001638381515244);
    FIR_hp_3M_CSDMult_p001831566636285 mult0p001831566636285(In, prod_0p001831566636285);
    FIR_hp_3M_CSDMult_p001987898865603 mult0p001987898865603(In, prod_0p001987898865603);
    FIR_hp_3M_CSDMult_p002103507151916 mult0p002103507151916(In, prod_0p002103507151916);
    FIR_hp_3M_CSDMult_p002175168552813 mult0p002175168552813(In, prod_0p002175168552813);
    FIR_hp_3M_CSDMult_p002199770831104 mult0p002199770831104(In, prod_0p002199770831104);
    FIR_hp_3M_CSDMult_p002175440181160 mult0p002175440181160(In, prod_0p002175440181160);
    FIR_hp_3M_CSDMult_p002101963600273 mult0p002101963600273(In, prod_0p002101963600273);
    FIR_hp_3M_CSDMult_p001979811199855 mult0p001979811199855(In, prod_0p001979811199855);
    FIR_hp_3M_CSDMult_p001809551714876 mult0p001809551714876(In, prod_0p001809551714876);
    FIR_hp_3M_CSDMult_p001594324038229 mult0p001594324038229(In, prod_0p001594324038229);
    FIR_hp_3M_CSDMult_p001337907401144 mult0p001337907401144(In, prod_0p001337907401144);
    FIR_hp_3M_CSDMult_p001044986969926 mult0p001044986969926(In, prod_0p001044986969926);
    FIR_hp_3M_CSDMult_p000720936790405 mult0p000720936790405(In, prod_0p000720936790405);
    FIR_hp_3M_CSDMult_p000372663219595 mult0p000372663219595(In, prod_0p000372663219595);
    FIR_hp_3M_CSDMult_p000007001844772 mult0p000007001844772(In, prod_0p000007001844772);
    FIR_hp_3M_CSDMult_p000368882744022 mult0p000368882744022(In, prod_0p000368882744022);
    FIR_hp_3M_CSDMult_p000746778118645 mult0p000746778118645(In, prod_0p000746778118645);
    FIR_hp_3M_CSDMult_p001117449265058 mult0p001117449265058(In, prod_0p001117449265058);
    FIR_hp_3M_CSDMult_p001472420714525 mult0p001472420714525(In, prod_0p001472420714525);
    FIR_hp_3M_CSDMult_p001803862365738 mult0p001803862365738(In, prod_0p001803862365738);
    FIR_hp_3M_CSDMult_p002103735783255 mult0p002103735783255(In, prod_0p002103735783255);
    FIR_hp_3M_CSDMult_p002364113902335 mult0p002364113902335(In, prod_0p002364113902335);
    FIR_hp_3M_CSDMult_p002578322327590 mult0p002578322327590(In, prod_0p002578322327590);
    FIR_hp_3M_CSDMult_p002740811241672 mult0p002740811241672(In, prod_0p002740811241672);
    FIR_hp_3M_CSDMult_p002846303958176 mult0p002846303958176(In, prod_0p002846303958176);
    FIR_hp_3M_CSDMult_p002890614994053 mult0p002890614994053(In, prod_0p002890614994053);
    FIR_hp_3M_CSDMult_p002871497292782 mult0p002871497292782(In, prod_0p002871497292782);
    FIR_hp_3M_CSDMult_p002787952256151 mult0p002787952256151(In, prod_0p002787952256151);
    FIR_hp_3M_CSDMult_p002639892046411 mult0p002639892046411(In, prod_0p002639892046411);
    FIR_hp_3M_CSDMult_p002428269823898 mult0p002428269823898(In, prod_0p002428269823898);
    FIR_hp_3M_CSDMult_p002156085890105 mult0p002156085890105(In, prod_0p002156085890105);
    FIR_hp_3M_CSDMult_p001827558953831 mult0p001827558953831(In, prod_0p001827558953831);
    FIR_hp_3M_CSDMult_p001449300037894 mult0p001449300037894(In, prod_0p001449300037894);
    FIR_hp_3M_CSDMult_p001027386341700 mult0p001027386341700(In, prod_0p001027386341700);
    FIR_hp_3M_CSDMult_p000570625036045 mult0p000570625036045(In, prod_0p000570625036045);
    FIR_hp_3M_CSDMult_p000086962818785 mult0p000086962818785(In, prod_0p000086962818785);
    FIR_hp_3M_CSDMult_p000411954263558 mult0p000411954263558(In, prod_0p000411954263558);
    FIR_hp_3M_CSDMult_p000917272484268 mult0p000917272484268(In, prod_0p000917272484268);
    FIR_hp_3M_CSDMult_p001416954155502 mult0p001416954155502(In, prod_0p001416954155502);
    FIR_hp_3M_CSDMult_p001899777694938 mult0p001899777694938(In, prod_0p001899777694938);
    FIR_hp_3M_CSDMult_p002354984692705 mult0p002354984692705(In, prod_0p002354984692705);
    FIR_hp_3M_CSDMult_p002770428314490 mult0p002770428314490(In, prod_0p002770428314490);
    FIR_hp_3M_CSDMult_p003137070223319 mult0p003137070223319(In, prod_0p003137070223319);
    FIR_hp_3M_CSDMult_p003445273826937 mult0p003445273826937(In, prod_0p003445273826937);
    FIR_hp_3M_CSDMult_p003685379144415 mult0p003685379144415(In, prod_0p003685379144415);
    FIR_hp_3M_CSDMult_p003850764675840 mult0p003850764675840(In, prod_0p003850764675840);
    FIR_hp_3M_CSDMult_p003935070187112 mult0p003935070187112(In, prod_0p003935070187112);
    FIR_hp_3M_CSDMult_p003933736529200 mult0p003933736529200(In, prod_0p003933736529200);
    FIR_hp_3M_CSDMult_p003844919574787 mult0p003844919574787(In, prod_0p003844919574787);
    FIR_hp_3M_CSDMult_p003666797847893 mult0p003666797847893(In, prod_0p003666797847893);
    FIR_hp_3M_CSDMult_p003400400862952 mult0p003400400862952(In, prod_0p003400400862952);
    FIR_hp_3M_CSDMult_p003049560226168 mult0p003049560226168(In, prod_0p003049560226168);
    FIR_hp_3M_CSDMult_p002618057264245 mult0p002618057264245(In, prod_0p002618057264245);
    FIR_hp_3M_CSDMult_p002112681056194 mult0p002112681056194(In, prod_0p002112681056194);
    FIR_hp_3M_CSDMult_p001542382737727 mult0p001542382737727(In, prod_0p001542382737727);
    FIR_hp_3M_CSDMult_p000917173150631 mult0p000917173150631(In, prod_0p000917173150631);
    FIR_hp_3M_CSDMult_p000249167461179 mult0p000249167461179(In, prod_0p000249167461179);
    FIR_hp_3M_CSDMult_p000448290544196 mult0p000448290544196(In, prod_0p000448290544196);
    FIR_hp_3M_CSDMult_p001160615730861 mult0p001160615730861(In, prod_0p001160615730861);
    FIR_hp_3M_CSDMult_p001873721622746 mult0p001873721622746(In, prod_0p001873721622746);
    FIR_hp_3M_CSDMult_p002571438364894 mult0p002571438364894(In, prod_0p002571438364894);
    FIR_hp_3M_CSDMult_p003237763645681 mult0p003237763645681(In, prod_0p003237763645681);
    FIR_hp_3M_CSDMult_p003856759618712 mult0p003856759618712(In, prod_0p003856759618712);
    FIR_hp_3M_CSDMult_p004413280766291 mult0p004413280766291(In, prod_0p004413280766291);
    FIR_hp_3M_CSDMult_p004892449363129 mult0p004892449363129(In, prod_0p004892449363129);
    FIR_hp_3M_CSDMult_p005280931661260 mult0p005280931661260(In, prod_0p005280931661260);
    FIR_hp_3M_CSDMult_p005566738520437 mult0p005566738520437(In, prod_0p005566738520437);
    FIR_hp_3M_CSDMult_p005739372782409 mult0p005739372782409(In, prod_0p005739372782409);
    FIR_hp_3M_CSDMult_p005790170882407 mult0p005790170882407(In, prod_0p005790170882407);
    FIR_hp_3M_CSDMult_p005713131084910 mult0p005713131084910(In, prod_0p005713131084910);
    FIR_hp_3M_CSDMult_p005504612562743 mult0p005504612562743(In, prod_0p005504612562743);
    FIR_hp_3M_CSDMult_p005163120251677 mult0p005163120251677(In, prod_0p005163120251677);
    FIR_hp_3M_CSDMult_p004690032646217 mult0p004690032646217(In, prod_0p004690032646217);
    FIR_hp_3M_CSDMult_p004089870640222 mult0p004089870640222(In, prod_0p004089870640222);
    FIR_hp_3M_CSDMult_p003369793618121 mult0p003369793618121(In, prod_0p003369793618121);
    FIR_hp_3M_CSDMult_p002539390347445 mult0p002539390347445(In, prod_0p002539390347445);
    FIR_hp_3M_CSDMult_p001611322305837 mult0p001611322305837(In, prod_0p001611322305837);
    FIR_hp_3M_CSDMult_p000601247638630 mult0p000601247638630(In, prod_0p000601247638630);
    FIR_hp_3M_CSDMult_p000473563918050 mult0p000473563918050(In, prod_0p000473563918050);
    FIR_hp_3M_CSDMult_p001593657321957 mult0p001593657321957(In, prod_0p001593657321957);
    FIR_hp_3M_CSDMult_p002737177080669 mult0p002737177080669(In, prod_0p002737177080669);
    FIR_hp_3M_CSDMult_p003880036695260 mult0p003880036695260(In, prod_0p003880036695260);
    FIR_hp_3M_CSDMult_p004998442408490 mult0p004998442408490(In, prod_0p004998442408490);
    FIR_hp_3M_CSDMult_p006066818206839 mult0p006066818206839(In, prod_0p006066818206839);
    FIR_hp_3M_CSDMult_p007060289580879 mult0p007060289580879(In, prod_0p007060289580879);
    FIR_hp_3M_CSDMult_p007952514757540 mult0p007952514757540(In, prod_0p007952514757540);
    FIR_hp_3M_CSDMult_p008719537053835 mult0p008719537053835(In, prod_0p008719537053835);
    FIR_hp_3M_CSDMult_p009336625351933 mult0p009336625351933(In, prod_0p009336625351933);
    FIR_hp_3M_CSDMult_p009782130944036 mult0p009782130944036(In, prod_0p009782130944036);
    FIR_hp_3M_CSDMult_p010035195664290 mult0p010035195664290(In, prod_0p010035195664290);
    FIR_hp_3M_CSDMult_p010076780048862 mult0p010076780048862(In, prod_0p010076780048862);
    FIR_hp_3M_CSDMult_p009892477101017 mult0p009892477101017(In, prod_0p009892477101017);
    FIR_hp_3M_CSDMult_p009469049637762 mult0p009469049637762(In, prod_0p009469049637762);
    FIR_hp_3M_CSDMult_p008797128063081 mult0p008797128063081(In, prod_0p008797128063081);
    FIR_hp_3M_CSDMult_p007871630391907 mult0p007871630391907(In, prod_0p007871630391907);
    FIR_hp_3M_CSDMult_p006690043389398 mult0p006690043389398(In, prod_0p006690043389398);
    FIR_hp_3M_CSDMult_p005255047717133 mult0p005255047717133(In, prod_0p005255047717133);
    FIR_hp_3M_CSDMult_p003572847464761 mult0p003572847464761(In, prod_0p003572847464761);
    FIR_hp_3M_CSDMult_p001652248529702 mult0p001652248529702(In, prod_0p001652248529702);
    FIR_hp_3M_CSDMult_p000492196465972 mult0p000492196465972(In, prod_0p000492196465972);
    FIR_hp_3M_CSDMult_p002842531708928 mult0p002842531708928(In, prod_0p002842531708928);
    FIR_hp_3M_CSDMult_p005378052997361 mult0p005378052997361(In, prod_0p005378052997361);
    FIR_hp_3M_CSDMult_p008073481473903 mult0p008073481473903(In, prod_0p008073481473903);
    FIR_hp_3M_CSDMult_p010901980979532 mult0p010901980979532(In, prod_0p010901980979532);
    FIR_hp_3M_CSDMult_p013833318121693 mult0p013833318121693(In, prod_0p013833318121693);
    FIR_hp_3M_CSDMult_p016834228536721 mult0p016834228536721(In, prod_0p016834228536721);
    FIR_hp_3M_CSDMult_p019871061855181 mult0p019871061855181(In, prod_0p019871061855181);
    FIR_hp_3M_CSDMult_p022907681087362 mult0p022907681087362(In, prod_0p022907681087362);
    FIR_hp_3M_CSDMult_p025907685202249 mult0p025907685202249(In, prod_0p025907685202249);
    FIR_hp_3M_CSDMult_p028833775742233 mult0p028833775742233(In, prod_0p028833775742233);
    FIR_hp_3M_CSDMult_p031650754888938 mult0p031650754888938(In, prod_0p031650754888938);
    FIR_hp_3M_CSDMult_p034322970686648 mult0p034322970686648(In, prod_0p034322970686648);
    FIR_hp_3M_CSDMult_p036816477657865 mult0p036816477657865(In, prod_0p036816477657865);
    FIR_hp_3M_CSDMult_p039099230128115 mult0p039099230128115(In, prod_0p039099230128115);
    FIR_hp_3M_CSDMult_p041141956788989 mult0p041141956788989(In, prod_0p041141956788989);
    FIR_hp_3M_CSDMult_p042917866233768 mult0p042917866233768(In, prod_0p042917866233768);
    FIR_hp_3M_CSDMult_p044403893105783 mult0p044403893105783(In, prod_0p044403893105783);
    FIR_hp_3M_CSDMult_p045580666550549 mult0p045580666550549(In, prod_0p045580666550549);
    FIR_hp_3M_CSDMult_p046432576048994 mult0p046432576048994(In, prod_0p046432576048994);
    FIR_hp_3M_CSDMult_p046948160834813 mult0p046948160834813(In, prod_0p046948160834813);
    FIR_hp_3M_CSDMult_p952879280278643 mult0p952879280278643(In, prod_0p952879280278643);

    always@(posedge Clock or posedge AsyncRst)
    begin
        if(AsyncRst)
        begin
            delay[0] <= 1'b0;
            delay[1] <= 1'b0;
            delay[2] <= 1'b0;
            delay[3] <= 1'b0;
            delay[4] <= 1'b0;
            delay[5] <= 1'b0;
            delay[6] <= 1'b0;
            delay[7] <= 1'b0;
            delay[8] <= 1'b0;
            delay[9] <= 1'b0;
            delay[10] <= 1'b0;
            delay[11] <= 1'b0;
            delay[12] <= 1'b0;
            delay[13] <= 1'b0;
            delay[14] <= 1'b0;
            delay[15] <= 1'b0;
            delay[16] <= 1'b0;
            delay[17] <= 1'b0;
            delay[18] <= 1'b0;
            delay[19] <= 1'b0;
            delay[20] <= 1'b0;
            delay[21] <= 1'b0;
            delay[22] <= 1'b0;
            delay[23] <= 1'b0;
            delay[24] <= 1'b0;
            delay[25] <= 1'b0;
            delay[26] <= 1'b0;
            delay[27] <= 1'b0;
            delay[28] <= 1'b0;
            delay[29] <= 1'b0;
            delay[30] <= 1'b0;
            delay[31] <= 1'b0;
            delay[32] <= 1'b0;
            delay[33] <= 1'b0;
            delay[34] <= 1'b0;
            delay[35] <= 1'b0;
            delay[36] <= 1'b0;
            delay[37] <= 1'b0;
            delay[38] <= 1'b0;
            delay[39] <= 1'b0;
            delay[40] <= 1'b0;
            delay[41] <= 1'b0;
            delay[42] <= 1'b0;
            delay[43] <= 1'b0;
            delay[44] <= 1'b0;
            delay[45] <= 1'b0;
            delay[46] <= 1'b0;
            delay[47] <= 1'b0;
            delay[48] <= 1'b0;
            delay[49] <= 1'b0;
            delay[50] <= 1'b0;
            delay[51] <= 1'b0;
            delay[52] <= 1'b0;
            delay[53] <= 1'b0;
            delay[54] <= 1'b0;
            delay[55] <= 1'b0;
            delay[56] <= 1'b0;
            delay[57] <= 1'b0;
            delay[58] <= 1'b0;
            delay[59] <= 1'b0;
            delay[60] <= 1'b0;
            delay[61] <= 1'b0;
            delay[62] <= 1'b0;
            delay[63] <= 1'b0;
            delay[64] <= 1'b0;
            delay[65] <= 1'b0;
            delay[66] <= 1'b0;
            delay[67] <= 1'b0;
            delay[68] <= 1'b0;
            delay[69] <= 1'b0;
            delay[70] <= 1'b0;
            delay[71] <= 1'b0;
            delay[72] <= 1'b0;
            delay[73] <= 1'b0;
            delay[74] <= 1'b0;
            delay[75] <= 1'b0;
            delay[76] <= 1'b0;
            delay[77] <= 1'b0;
            delay[78] <= 1'b0;
            delay[79] <= 1'b0;
            delay[80] <= 1'b0;
            delay[81] <= 1'b0;
            delay[82] <= 1'b0;
            delay[83] <= 1'b0;
            delay[84] <= 1'b0;
            delay[85] <= 1'b0;
            delay[86] <= 1'b0;
            delay[87] <= 1'b0;
            delay[88] <= 1'b0;
            delay[89] <= 1'b0;
            delay[90] <= 1'b0;
            delay[91] <= 1'b0;
            delay[92] <= 1'b0;
            delay[93] <= 1'b0;
            delay[94] <= 1'b0;
            delay[95] <= 1'b0;
            delay[96] <= 1'b0;
            delay[97] <= 1'b0;
            delay[98] <= 1'b0;
            delay[99] <= 1'b0;
            delay[100] <= 1'b0;
            delay[101] <= 1'b0;
            delay[102] <= 1'b0;
            delay[103] <= 1'b0;
            delay[104] <= 1'b0;
            delay[105] <= 1'b0;
            delay[106] <= 1'b0;
            delay[107] <= 1'b0;
            delay[108] <= 1'b0;
            delay[109] <= 1'b0;
            delay[110] <= 1'b0;
            delay[111] <= 1'b0;
            delay[112] <= 1'b0;
            delay[113] <= 1'b0;
            delay[114] <= 1'b0;
            delay[115] <= 1'b0;
            delay[116] <= 1'b0;
            delay[117] <= 1'b0;
            delay[118] <= 1'b0;
            delay[119] <= 1'b0;
            delay[120] <= 1'b0;
            delay[121] <= 1'b0;
            delay[122] <= 1'b0;
            delay[123] <= 1'b0;
            delay[124] <= 1'b0;
            delay[125] <= 1'b0;
            delay[126] <= 1'b0;
            delay[127] <= 1'b0;
            delay[128] <= 1'b0;
            delay[129] <= 1'b0;
            delay[130] <= 1'b0;
            delay[131] <= 1'b0;
            delay[132] <= 1'b0;
            delay[133] <= 1'b0;
            delay[134] <= 1'b0;
            delay[135] <= 1'b0;
            delay[136] <= 1'b0;
            delay[137] <= 1'b0;
            delay[138] <= 1'b0;
            delay[139] <= 1'b0;
            delay[140] <= 1'b0;
            delay[141] <= 1'b0;
            delay[142] <= 1'b0;
            delay[143] <= 1'b0;
            delay[144] <= 1'b0;
            delay[145] <= 1'b0;
            delay[146] <= 1'b0;
            delay[147] <= 1'b0;
            delay[148] <= 1'b0;
            delay[149] <= 1'b0;
            delay[150] <= 1'b0;
            delay[151] <= 1'b0;
            delay[152] <= 1'b0;
            delay[153] <= 1'b0;
            delay[154] <= 1'b0;
            delay[155] <= 1'b0;
            delay[156] <= 1'b0;
            delay[157] <= 1'b0;
            delay[158] <= 1'b0;
            delay[159] <= 1'b0;
            delay[160] <= 1'b0;
            delay[161] <= 1'b0;
            delay[162] <= 1'b0;
            delay[163] <= 1'b0;
            delay[164] <= 1'b0;
            delay[165] <= 1'b0;
            delay[166] <= 1'b0;
            delay[167] <= 1'b0;
            delay[168] <= 1'b0;
            delay[169] <= 1'b0;
            delay[170] <= 1'b0;
            delay[171] <= 1'b0;
            delay[172] <= 1'b0;
            delay[173] <= 1'b0;
            delay[174] <= 1'b0;
            delay[175] <= 1'b0;
            delay[176] <= 1'b0;
            delay[177] <= 1'b0;
            delay[178] <= 1'b0;
            delay[179] <= 1'b0;
            delay[180] <= 1'b0;
            delay[181] <= 1'b0;
            delay[182] <= 1'b0;
            delay[183] <= 1'b0;
            delay[184] <= 1'b0;
            delay[185] <= 1'b0;
            delay[186] <= 1'b0;
            delay[187] <= 1'b0;
            delay[188] <= 1'b0;
            delay[189] <= 1'b0;
            delay[190] <= 1'b0;
            delay[191] <= 1'b0;
            delay[192] <= 1'b0;
            delay[193] <= 1'b0;
            delay[194] <= 1'b0;
            delay[195] <= 1'b0;
            delay[196] <= 1'b0;
            delay[197] <= 1'b0;
            delay[198] <= 1'b0;
            delay[199] <= 1'b0;
            delay[200] <= 1'b0;
            delay[201] <= 1'b0;
            delay[202] <= 1'b0;
            delay[203] <= 1'b0;
            delay[204] <= 1'b0;
            delay[205] <= 1'b0;
            delay[206] <= 1'b0;
            delay[207] <= 1'b0;
            delay[208] <= 1'b0;
            delay[209] <= 1'b0;
            delay[210] <= 1'b0;
            delay[211] <= 1'b0;
            delay[212] <= 1'b0;
            delay[213] <= 1'b0;
            delay[214] <= 1'b0;
            delay[215] <= 1'b0;
            delay[216] <= 1'b0;
            delay[217] <= 1'b0;
            delay[218] <= 1'b0;
            delay[219] <= 1'b0;
            delay[220] <= 1'b0;
            delay[221] <= 1'b0;
            delay[222] <= 1'b0;
            delay[223] <= 1'b0;
            delay[224] <= 1'b0;
            delay[225] <= 1'b0;
            delay[226] <= 1'b0;
            delay[227] <= 1'b0;
            delay[228] <= 1'b0;
            delay[229] <= 1'b0;
            delay[230] <= 1'b0;
            delay[231] <= 1'b0;
            delay[232] <= 1'b0;
            delay[233] <= 1'b0;
            delay[234] <= 1'b0;
            delay[235] <= 1'b0;
            delay[236] <= 1'b0;
            delay[237] <= 1'b0;
            delay[238] <= 1'b0;
            delay[239] <= 1'b0;
            delay[240] <= 1'b0;
            delay[241] <= 1'b0;
            delay[242] <= 1'b0;
            delay[243] <= 1'b0;
            delay[244] <= 1'b0;
            delay[245] <= 1'b0;
            delay[246] <= 1'b0;
            delay[247] <= 1'b0;
            delay[248] <= 1'b0;
            delay[249] <= 1'b0;
            delay[250] <= 1'b0;
            delay[251] <= 1'b0;
            delay[252] <= 1'b0;
            delay[253] <= 1'b0;
            delay[254] <= 1'b0;
            delay[255] <= 1'b0;
            delay[256] <= 1'b0;
            delay[257] <= 1'b0;
            delay[258] <= 1'b0;
            delay[259] <= 1'b0;
            delay[260] <= 1'b0;
            delay[261] <= 1'b0;
            delay[262] <= 1'b0;
            delay[263] <= 1'b0;
            delay[264] <= 1'b0;
            delay[265] <= 1'b0;
            delay[266] <= 1'b0;
            delay[267] <= 1'b0;
            delay[268] <= 1'b0;
            delay[269] <= 1'b0;
            delay[270] <= 1'b0;
            delay[271] <= 1'b0;
            delay[272] <= 1'b0;
            delay[273] <= 1'b0;
            delay[274] <= 1'b0;
            delay[275] <= 1'b0;
            delay[276] <= 1'b0;
            delay[277] <= 1'b0;
            delay[278] <= 1'b0;
            delay[279] <= 1'b0;
            delay[280] <= 1'b0;
            delay[281] <= 1'b0;
            delay[282] <= 1'b0;
            delay[283] <= 1'b0;
            delay[284] <= 1'b0;
            delay[285] <= 1'b0;
            delay[286] <= 1'b0;
            delay[287] <= 1'b0;
            delay[288] <= 1'b0;
            delay[289] <= 1'b0;
            delay[290] <= 1'b0;
            delay[291] <= 1'b0;
            delay[292] <= 1'b0;
            delay[293] <= 1'b0;
            delay[294] <= 1'b0;
            delay[295] <= 1'b0;
            delay[296] <= 1'b0;
            delay[297] <= 1'b0;
            delay[298] <= 1'b0;
            delay[299] <= 1'b0;
            delay[300] <= 1'b0;
            delay[301] <= 1'b0;
            delay[302] <= 1'b0;
            delay[303] <= 1'b0;
            delay[304] <= 1'b0;
            delay[305] <= 1'b0;
            delay[306] <= 1'b0;
            delay[307] <= 1'b0;
            delay[308] <= 1'b0;
            delay[309] <= 1'b0;
            delay[310] <= 1'b0;
            delay[311] <= 1'b0;
            delay[312] <= 1'b0;
            delay[313] <= 1'b0;
            delay[314] <= 1'b0;
            delay[315] <= 1'b0;
            delay[316] <= 1'b0;
            delay[317] <= 1'b0;
            delay[318] <= 1'b0;
            delay[319] <= 1'b0;
            delay[320] <= 1'b0;
            delay[321] <= 1'b0;
            delay[322] <= 1'b0;
            delay[323] <= 1'b0;
            delay[324] <= 1'b0;
            delay[325] <= 1'b0;
            delay[326] <= 1'b0;
            delay[327] <= 1'b0;
            delay[328] <= 1'b0;
            delay[329] <= 1'b0;
            delay[330] <= 1'b0;
            delay[331] <= 1'b0;
            delay[332] <= 1'b0;
            delay[333] <= 1'b0;
            delay[334] <= 1'b0;
            delay[335] <= 1'b0;
            delay[336] <= 1'b0;
            delay[337] <= 1'b0;
            delay[338] <= 1'b0;
            delay[339] <= 1'b0;
            delay[340] <= 1'b0;
            delay[341] <= 1'b0;
            delay[342] <= 1'b0;
            delay[343] <= 1'b0;
            delay[344] <= 1'b0;
            delay[345] <= 1'b0;
            delay[346] <= 1'b0;
            delay[347] <= 1'b0;
            delay[348] <= 1'b0;
            delay[349] <= 1'b0;
            delay[350] <= 1'b0;
            delay[351] <= 1'b0;
            delay[352] <= 1'b0;
            delay[353] <= 1'b0;
            delay[354] <= 1'b0;
            delay[355] <= 1'b0;
            delay[356] <= 1'b0;
            delay[357] <= 1'b0;
            delay[358] <= 1'b0;
            delay[359] <= 1'b0;
            delay[360] <= 1'b0;
            delay[361] <= 1'b0;
            delay[362] <= 1'b0;
            delay[363] <= 1'b0;
            delay[364] <= 1'b0;
            delay[365] <= 1'b0;
            delay[366] <= 1'b0;
            delay[367] <= 1'b0;
            delay[368] <= 1'b0;
            delay[369] <= 1'b0;
            delay[370] <= 1'b0;
            delay[371] <= 1'b0;
            delay[372] <= 1'b0;
            delay[373] <= 1'b0;
            delay[374] <= 1'b0;
            delay[375] <= 1'b0;
            delay[376] <= 1'b0;
            delay[377] <= 1'b0;
            delay[378] <= 1'b0;
            delay[379] <= 1'b0;
            delay[380] <= 1'b0;
            delay[381] <= 1'b0;
            delay[382] <= 1'b0;
            delay[383] <= 1'b0;
            delay[384] <= 1'b0;
            delay[385] <= 1'b0;
            delay[386] <= 1'b0;
            delay[387] <= 1'b0;
            delay[388] <= 1'b0;
            delay[389] <= 1'b0;
            delay[390] <= 1'b0;
            delay[391] <= 1'b0;
            delay[392] <= 1'b0;
            delay[393] <= 1'b0;
            delay[394] <= 1'b0;
            delay[395] <= 1'b0;
            delay[396] <= 1'b0;
            delay[397] <= 1'b0;
            delay[398] <= 1'b0;
            delay[399] <= 1'b0;
            delay[400] <= 1'b0;
            delay[401] <= 1'b0;
            delay[402] <= 1'b0;
            delay[403] <= 1'b0;
            delay[404] <= 1'b0;
            delay[405] <= 1'b0;
            delay[406] <= 1'b0;
            delay[407] <= 1'b0;
            delay[408] <= 1'b0;
            delay[409] <= 1'b0;
            delay[410] <= 1'b0;
            delay[411] <= 1'b0;
            delay[412] <= 1'b0;
            delay[413] <= 1'b0;
            delay[414] <= 1'b0;
            delay[415] <= 1'b0;
            delay[416] <= 1'b0;
            delay[417] <= 1'b0;
            delay[418] <= 1'b0;
            delay[419] <= 1'b0;
            delay[420] <= 1'b0;
            delay[421] <= 1'b0;
            delay[422] <= 1'b0;
            delay[423] <= 1'b0;
            delay[424] <= 1'b0;
            delay[425] <= 1'b0;
            delay[426] <= 1'b0;
            delay[427] <= 1'b0;
            delay[428] <= 1'b0;
            delay[429] <= 1'b0;
            delay[430] <= 1'b0;
            delay[431] <= 1'b0;
            delay[432] <= 1'b0;
            delay[433] <= 1'b0;
            delay[434] <= 1'b0;
            delay[435] <= 1'b0;
            delay[436] <= 1'b0;
            delay[437] <= 1'b0;
            delay[438] <= 1'b0;
            delay[439] <= 1'b0;
            delay[440] <= 1'b0;
            delay[441] <= 1'b0;
            delay[442] <= 1'b0;
            delay[443] <= 1'b0;
            delay[444] <= 1'b0;
            delay[445] <= 1'b0;
            delay[446] <= 1'b0;
            delay[447] <= 1'b0;
            delay[448] <= 1'b0;
            delay[449] <= 1'b0;
            delay[450] <= 1'b0;
            delay[451] <= 1'b0;
            delay[452] <= 1'b0;
            delay[453] <= 1'b0;
            delay[454] <= 1'b0;
            delay[455] <= 1'b0;
            delay[456] <= 1'b0;
            delay[457] <= 1'b0;
            delay[458] <= 1'b0;
            delay[459] <= 1'b0;
            delay[460] <= 1'b0;
            delay[461] <= 1'b0;
            delay[462] <= 1'b0;
            delay[463] <= 1'b0;
            delay[464] <= 1'b0;
            delay[465] <= 1'b0;
            delay[466] <= 1'b0;
            delay[467] <= 1'b0;
            delay[468] <= 1'b0;
            delay[469] <= 1'b0;
            delay[470] <= 1'b0;
            delay[471] <= 1'b0;
            delay[472] <= 1'b0;
            delay[473] <= 1'b0;
            delay[474] <= 1'b0;
            delay[475] <= 1'b0;
            delay[476] <= 1'b0;
            delay[477] <= 1'b0;
            delay[478] <= 1'b0;
            delay[479] <= 1'b0;
            delay[480] <= 1'b0;
            delay[481] <= 1'b0;
            delay[482] <= 1'b0;
            delay[483] <= 1'b0;
            delay[484] <= 1'b0;
            delay[485] <= 1'b0;
            delay[486] <= 1'b0;
            delay[487] <= 1'b0;
            delay[488] <= 1'b0;
            delay[489] <= 1'b0;
            delay[490] <= 1'b0;
            delay[491] <= 1'b0;
            delay[492] <= 1'b0;
            delay[493] <= 1'b0;
            delay[494] <= 1'b0;
            delay[495] <= 1'b0;
            delay[496] <= 1'b0;
            delay[497] <= 1'b0;
            delay[498] <= 1'b0;
            delay[499] <= 1'b0;
            delay[500] <= 1'b0;
            delay[501] <= 1'b0;
            delay[502] <= 1'b0;
            delay[503] <= 1'b0;
            delay[504] <= 1'b0;
            delay[505] <= 1'b0;
            delay[506] <= 1'b0;
            delay[507] <= 1'b0;
            delay[508] <= 1'b0;
            delay[509] <= 1'b0;
            delay[510] <= 1'b0;
            delay[511] <= 1'b0;
            delay[512] <= 1'b0;
            delay[513] <= 1'b0;
            delay[514] <= 1'b0;
            delay[515] <= 1'b0;
            delay[516] <= 1'b0;
            delay[517] <= 1'b0;
            delay[518] <= 1'b0;
            delay[519] <= 1'b0;
            delay[520] <= 1'b0;
            delay[521] <= 1'b0;
            delay[522] <= 1'b0;
            delay[523] <= 1'b0;
            delay[524] <= 1'b0;
            delay[525] <= 1'b0;
            delay[526] <= 1'b0;
            delay[527] <= 1'b0;
            delay[528] <= 1'b0;
            delay[529] <= 1'b0;
            delay[530] <= 1'b0;
            delay[531] <= 1'b0;
            delay[532] <= 1'b0;
            delay[533] <= 1'b0;
            delay[534] <= 1'b0;
            delay[535] <= 1'b0;
            delay[536] <= 1'b0;
            delay[537] <= 1'b0;
            delay[538] <= 1'b0;
            delay[539] <= 1'b0;
            delay[540] <= 1'b0;
            delay[541] <= 1'b0;
            delay[542] <= 1'b0;
            delay[543] <= 1'b0;
            delay[544] <= 1'b0;
            delay[545] <= 1'b0;
            delay[546] <= 1'b0;
            delay[547] <= 1'b0;
            delay[548] <= 1'b0;
            delay[549] <= 1'b0;
            delay[550] <= 1'b0;
            delay[551] <= 1'b0;
            delay[552] <= 1'b0;
            delay[553] <= 1'b0;
            delay[554] <= 1'b0;
            delay[555] <= 1'b0;
            delay[556] <= 1'b0;
            delay[557] <= 1'b0;
            delay[558] <= 1'b0;
            delay[559] <= 1'b0;
            delay[560] <= 1'b0;
            delay[561] <= 1'b0;
            delay[562] <= 1'b0;
            delay[563] <= 1'b0;
            delay[564] <= 1'b0;
            delay[565] <= 1'b0;
            delay[566] <= 1'b0;
            delay[567] <= 1'b0;
            delay[568] <= 1'b0;
            delay[569] <= 1'b0;
            delay[570] <= 1'b0;
            delay[571] <= 1'b0;
            delay[572] <= 1'b0;
            delay[573] <= 1'b0;
            delay[574] <= 1'b0;
            delay[575] <= 1'b0;
            delay[576] <= 1'b0;
            delay[577] <= 1'b0;
            delay[578] <= 1'b0;
            delay[579] <= 1'b0;
            delay[580] <= 1'b0;
            delay[581] <= 1'b0;
            delay[582] <= 1'b0;
            delay[583] <= 1'b0;
            delay[584] <= 1'b0;
            delay[585] <= 1'b0;
            delay[586] <= 1'b0;
            delay[587] <= 1'b0;
            delay[588] <= 1'b0;
            delay[589] <= 1'b0;
            delay[590] <= 1'b0;
            delay[591] <= 1'b0;
            delay[592] <= 1'b0;
            delay[593] <= 1'b0;
            delay[594] <= 1'b0;
            delay[595] <= 1'b0;
            delay[596] <= 1'b0;
            delay[597] <= 1'b0;
            delay[598] <= 1'b0;
            delay[599] <= 1'b0;
            delay[600] <= 1'b0;
            delay[601] <= 1'b0;
            delay[602] <= 1'b0;
            delay[603] <= 1'b0;
            delay[604] <= 1'b0;
            delay[605] <= 1'b0;
            delay[606] <= 1'b0;
            delay[607] <= 1'b0;
            delay[608] <= 1'b0;
            delay[609] <= 1'b0;
            delay[610] <= 1'b0;
            delay[611] <= 1'b0;
            delay[612] <= 1'b0;
            delay[613] <= 1'b0;
            delay[614] <= 1'b0;
            delay[615] <= 1'b0;
            delay[616] <= 1'b0;
            delay[617] <= 1'b0;
            delay[618] <= 1'b0;
            delay[619] <= 1'b0;
            delay[620] <= 1'b0;
            delay[621] <= 1'b0;
            delay[622] <= 1'b0;
            delay[623] <= 1'b0;
            delay[624] <= 1'b0;
            delay[625] <= 1'b0;
            delay[626] <= 1'b0;
            delay[627] <= 1'b0;
            delay[628] <= 1'b0;
            delay[629] <= 1'b0;
            delay[630] <= 1'b0;
            delay[631] <= 1'b0;
            delay[632] <= 1'b0;
            delay[633] <= 1'b0;
            delay[634] <= 1'b0;
            delay[635] <= 1'b0;
            delay[636] <= 1'b0;
            delay[637] <= 1'b0;
            delay[638] <= 1'b0;
            delay[639] <= 1'b0;
            delay[640] <= 1'b0;
            delay[641] <= 1'b0;
            delay[642] <= 1'b0;
            delay[643] <= 1'b0;
            delay[644] <= 1'b0;
            delay[645] <= 1'b0;
            delay[646] <= 1'b0;
            delay[647] <= 1'b0;
            delay[648] <= 1'b0;
            delay[649] <= 1'b0;
            delay[650] <= 1'b0;
            delay[651] <= 1'b0;
            delay[652] <= 1'b0;
            delay[653] <= 1'b0;
            delay[654] <= 1'b0;
            delay[655] <= 1'b0;
            delay[656] <= 1'b0;
            delay[657] <= 1'b0;
            delay[658] <= 1'b0;
            delay[659] <= 1'b0;
            delay[660] <= 1'b0;
            delay[661] <= 1'b0;
            delay[662] <= 1'b0;
            delay[663] <= 1'b0;
            delay[664] <= 1'b0;
            delay[665] <= 1'b0;
            delay[666] <= 1'b0;
            delay[667] <= 1'b0;
            delay[668] <= 1'b0;
            delay[669] <= 1'b0;
        end
        else if(ClkEn)
        begin
            Out <= delay[0] - prod_0p010637157984332;
            delay[0] <= delay[1] + prod_0p010019109120374;
            delay[1] <= delay[2] + prod_0p005284442531356;
            delay[2] <= delay[3] + prod_0p002036304972377;
            delay[3] <= delay[4] - prod_0p000070661049161;
            delay[4] <= delay[5] - prod_0p001319160405792;
            delay[5] <= delay[6] - prod_0p001938034372603;
            delay[6] <= delay[7] - prod_0p002110906309105;
            delay[7] <= delay[8] - prod_0p001983139125333;
            delay[8] <= delay[9] - prod_0p001667739984795;
            delay[9] <= delay[10] - prod_0p001251350199643;
            delay[10] <= delay[11] - prod_0p000798395308804;
            delay[11] <= delay[12] - prod_0p000355031916952;
            delay[12] <= delay[13] + prod_0p000046927875400;
            delay[13] <= delay[14] + prod_0p000387502172574;
            delay[14] <= delay[15] + prod_0p000655794674816;
            delay[15] <= delay[16] + prod_0p000847932573919;
            delay[16] <= delay[17] + prod_0p000965537970318;
            delay[17] <= delay[18] + prod_0p001013951113230;
            delay[18] <= delay[19] + prod_0p001001118040788;
            delay[19] <= delay[20] + prod_0p000936378377169;
            delay[20] <= delay[21] + prod_0p000830187477825;
            delay[21] <= delay[22] + prod_0p000693074460695;
            delay[22] <= delay[23] + prod_0p000535083400629;
            delay[23] <= delay[24] + prod_0p000365686831791;
            delay[24] <= delay[25] + prod_0p000193448104945;
            delay[25] <= delay[26] + prod_0p000025887526338;
            delay[26] <= delay[27] - prod_0p000130751933239;
            delay[27] <= delay[28] - prod_0p000271403671133;
            delay[28] <= delay[29] - prod_0p000392189099473;
            delay[29] <= delay[30] - prod_0p000490421733888;
            delay[30] <= delay[31] - prod_0p000564537970177;
            delay[31] <= delay[32] - prod_0p000613888781739;
            delay[32] <= delay[33] - prod_0p000638804573678;
            delay[33] <= delay[34] - prod_0p000640204530451;
            delay[34] <= delay[35] - prod_0p000619885239071;
            delay[35] <= delay[36] - prod_0p000580010028728;
            delay[36] <= delay[37] - prod_0p000523059259547;
            delay[37] <= delay[38] - prod_0p000451852218996;
            delay[38] <= delay[39] - prod_0p000369468822649;
            delay[39] <= delay[40] - prod_0p000279049452148;
            delay[40] <= delay[41] - prod_0p000183521462318;
            delay[41] <= delay[42] - prod_0p000086004256734;
            delay[42] <= delay[43] + prod_0p000010592272627;
            delay[43] <= delay[44] + prod_0p000103843508644;
            delay[44] <= delay[45] + prod_0p000191216402380;
            delay[45] <= delay[46] + prod_0p000270905109505;
            delay[46] <= delay[47] + prod_0p000339972864915;
            delay[47] <= delay[48] + prod_0p000400632321268;
            delay[48] <= delay[49] + prod_0p000441431072757;
            delay[49] <= delay[50] + prod_0p000484676446652;
            delay[50] <= delay[51] + prod_0p000490267233623;
            delay[51] <= delay[52] + prod_0p000509565672488;
            delay[52] <= delay[53] + prod_0p000497383335527;
            delay[53] <= delay[54] + prod_0p000471940394081;
            delay[54] <= delay[55] + prod_0p000448351097771;
            delay[55] <= delay[56] + prod_0p000404963603142;
            delay[56] <= delay[57] + prod_0p000345878176474;
            delay[57] <= delay[58] + prod_0p000287745081791;
            delay[58] <= delay[59] + prod_0p000225446430378;
            delay[59] <= delay[60] + prod_0p000150723470046;
            delay[60] <= delay[61] + prod_0p000071121375746;
            delay[61] <= delay[62] - prod_0p000003777403829;
            delay[62] <= delay[63] - prod_0p000075698403024;
            delay[63] <= delay[64] - prod_0p000149939910081;
            delay[64] <= delay[65] - prod_0p000223580958635;
            delay[65] <= delay[66] - prod_0p000288914792923;
            delay[66] <= delay[67] - prod_0p000343368526417;
            delay[67] <= delay[68] - prod_0p000389998261604;
            delay[68] <= delay[69] - prod_0p000431003309979;
            delay[69] <= delay[70] - prod_0p000463493825448;
            delay[70] <= delay[71] - prod_0p000483068757652;
            delay[71] <= delay[72] - prod_0p000488511454582;
            delay[72] <= delay[73] - prod_0p000482267481818;
            delay[73] <= delay[74] - prod_0p000467123738818;
            delay[74] <= delay[75] - prod_0p000442871930003;
            delay[75] <= delay[76] - prod_0p000407557471672;
            delay[76] <= delay[77] - prod_0p000360252537365;
            delay[77] <= delay[78] - prod_0p000302753253499;
            delay[78] <= delay[79] - prod_0p000238278080506;
            delay[79] <= delay[80] - prod_0p000169541178580;
            delay[80] <= delay[81] - prod_0p000097509344623;
            delay[81] <= delay[82] - prod_0p000022120509649;
            delay[82] <= delay[83] + prod_0p000056301935159;
            delay[83] <= delay[84] + prod_0p000135582805604;
            delay[84] <= delay[85] + prod_0p000212519156837;
            delay[85] <= delay[86] + prod_0p000284114844126;
            delay[86] <= delay[87] + prod_0p000348713352137;
            delay[87] <= delay[88] + prod_0p000405932178706;
            delay[88] <= delay[89] + prod_0p000455545509093;
            delay[89] <= delay[90] + prod_0p000496663763067;
            delay[90] <= delay[91] + prod_0p000527552682583;
            delay[91] <= delay[92] + prod_0p000546377345845;
            delay[92] <= delay[93] + prod_0p000551824009197;
            delay[93] <= delay[94] + prod_0p000543631315911;
            delay[94] <= delay[95] + prod_0p000522974597703;
            delay[95] <= delay[96] + prod_0p000490443208993;
            delay[96] <= delay[97] + prod_0p000447656688014;
            delay[97] <= delay[98] + prod_0p000393004899282;
            delay[98] <= delay[99] + prod_0p000330917446534;
            delay[99] <= delay[100] + prod_0p000254860497985;
            delay[100] <= delay[101] + prod_0p000176622219239;
            delay[101] <= delay[102] + prod_0p000086409746424;
            delay[102] <= delay[103] - prod_0p000002890481197;
            delay[103] <= delay[104] - prod_0p000093543980808;
            delay[104] <= delay[105] - prod_0p000185949731817;
            delay[105] <= delay[106] - prod_0p000272002076543;
            delay[106] <= delay[107] - prod_0p000354867503494;
            delay[107] <= delay[108] - prod_0p000434043351066;
            delay[108] <= delay[109] - prod_0p000502812585862;
            delay[109] <= delay[110] - prod_0p000561667197245;
            delay[110] <= delay[111] - prod_0p000610825493074;
            delay[111] <= delay[112] - prod_0p000645098759781;
            delay[112] <= delay[113] - prod_0p000663278281370;
            delay[113] <= delay[114] - prod_0p000667866668977;
            delay[114] <= delay[115] - prod_0p000658271299037;
            delay[115] <= delay[116] - prod_0p000632374068889;
            delay[116] <= delay[117] - prod_0p000591322226063;
            delay[117] <= delay[118] - prod_0p000537746317635;
            delay[118] <= delay[119] - prod_0p000471134423591;
            delay[119] <= delay[120] - prod_0p000390681464090;
            delay[120] <= delay[121] - prod_0p000298650041500;
            delay[121] <= delay[122] - prod_0p000198566154554;
            delay[122] <= delay[123] - prod_0p000092337570728;
            delay[123] <= delay[124] + prod_0p000019081271535;
            delay[124] <= delay[125] + prod_0p000132578335336;
            delay[125] <= delay[126] + prod_0p000244360024508;
            delay[126] <= delay[127] + prod_0p000351928673573;
            delay[127] <= delay[128] + prod_0p000454313334118;
            delay[128] <= delay[129] + prod_0p000549708924911;
            delay[129] <= delay[130] + prod_0p000635048952155;
            delay[130] <= delay[131] + prod_0p000707198666647;
            delay[131] <= delay[132] + prod_0p000764505858335;
            delay[132] <= delay[133] + prod_0p000806032995820;
            delay[133] <= delay[134] + prod_0p000830477253542;
            delay[134] <= delay[135] + prod_0p000835879311207;
            delay[135] <= delay[136] + prod_0p000821300911915;
            delay[136] <= delay[137] + prod_0p000787475573779;
            delay[137] <= delay[138] + prod_0p000735652495995;
            delay[138] <= delay[139] + prod_0p000666682697453;
            delay[139] <= delay[140] + prod_0p000581124967296;
            delay[140] <= delay[141] + prod_0p000480114418238;
            delay[141] <= delay[142] + prod_0p000365722988386;
            delay[142] <= delay[143] + prod_0p000240602970550;
            delay[143] <= delay[144] + prod_0p000107443809606;
            delay[144] <= delay[145] - prod_0p000031631782474;
            delay[145] <= delay[146] - prod_0p000173425118704;
            delay[146] <= delay[147] - prod_0p000315407463963;
            delay[147] <= delay[148] - prod_0p000452437109362;
            delay[148] <= delay[149] - prod_0p000582952941516;
            delay[149] <= delay[150] - prod_0p000700324503472;
            delay[150] <= delay[151] - prod_0p000806886523648;
            delay[151] <= delay[152] - prod_0p000895347907654;
            delay[152] <= delay[153] - prod_0p000967277173120;
            delay[153] <= delay[154] - prod_0p001018750148792;
            delay[154] <= delay[155] - prod_0p001046876942412;
            delay[155] <= delay[156] - prod_0p001053522469621;
            delay[156] <= delay[157] - prod_0p001035722549540;
            delay[157] <= delay[158] - prod_0p000993790868210;
            delay[158] <= delay[159] - prod_0p000929812611981;
            delay[159] <= delay[160] - prod_0p000842026186571;
            delay[160] <= delay[161] - prod_0p000732018995810;
            delay[161] <= delay[162] - prod_0p000603729341322;
            delay[162] <= delay[163] - prod_0p000458468120234;
            delay[163] <= delay[164] - prod_0p000299385224793;
            delay[164] <= delay[165] - prod_0p000131186631082;
            delay[165] <= delay[166] + prod_0p000043611672557;
            delay[166] <= delay[167] + prod_0p000222167191164;
            delay[167] <= delay[168] + prod_0p000399770088819;
            delay[168] <= delay[169] + prod_0p000571717728426;
            delay[169] <= delay[170] + prod_0p000734969021613;
            delay[170] <= delay[171] + prod_0p000885778977877;
            delay[171] <= delay[172] + prod_0p001019515232348;
            delay[172] <= delay[173] + prod_0p001133364014002;
            delay[173] <= delay[174] + prod_0p001224992952329;
            delay[174] <= delay[175] + prod_0p001291460944742;
            delay[175] <= delay[176] + prod_0p001329292244818;
            delay[176] <= delay[177] + prod_0p001337262753940;
            delay[177] <= delay[178] + prod_0p001315301014142;
            delay[178] <= delay[179] + prod_0p001263232728687;
            delay[179] <= delay[180] + prod_0p001181021453257;
            delay[180] <= delay[181] + prod_0p001070376741302;
            delay[181] <= delay[182] + prod_0p000933715488556;
            delay[182] <= delay[183] + prod_0p000773177826181;
            delay[183] <= delay[184] + prod_0p000591012514049;
            delay[184] <= delay[185] + prod_0p000390942745603;
            delay[185] <= delay[186] + prod_0p000177649657508;
            delay[186] <= delay[187] - prod_0p000044288172742;
            delay[187] <= delay[188] - prod_0p000270460824857;
            delay[188] <= delay[189] - prod_0p000496245017214;
            delay[189] <= delay[190] - prod_0p000716372841401;
            delay[190] <= delay[191] - prod_0p000925419102546;
            delay[191] <= delay[192] - prod_0p001118577493783;
            delay[192] <= delay[193] - prod_0p001291330025415;
            delay[193] <= delay[194] - prod_0p001439035403261;
            delay[194] <= delay[195] - prod_0p001556940333362;
            delay[195] <= delay[196] - prod_0p001642241407582;
            delay[196] <= delay[197] - prod_0p001692195353790;
            delay[197] <= delay[198] - prod_0p001706187280388;
            delay[198] <= delay[199] - prod_0p001681431670775;
            delay[199] <= delay[200] - prod_0p001619284984364;
            delay[200] <= delay[201] - prod_0p001517743750544;
            delay[201] <= delay[202] - prod_0p001381168029941;
            delay[202] <= delay[203] - prod_0p001209765049681;
            delay[203] <= delay[204] - prod_0p001006862218609;
            delay[204] <= delay[205] - prod_0p000777015943843;
            delay[205] <= delay[206] - prod_0p000523127142025;
            delay[206] <= delay[207] - prod_0p000251975066314;
            delay[207] <= delay[208] + prod_0p000031080014503;
            delay[208] <= delay[209] + prod_0p000321139029943;
            delay[209] <= delay[210] + prod_0p000610649036597;
            delay[210] <= delay[211] + prod_0p000893796082537;
            delay[211] <= delay[212] + prod_0p001164389963439;
            delay[212] <= delay[213] + prod_0p001414365093299;
            delay[213] <= delay[214] + prod_0p001638381515244;
            delay[214] <= delay[215] + prod_0p001831566636285;
            delay[215] <= delay[216] + prod_0p001987898865603;
            delay[216] <= delay[217] + prod_0p002103507151916;
            delay[217] <= delay[218] + prod_0p002175168552813;
            delay[218] <= delay[219] + prod_0p002199770831104;
            delay[219] <= delay[220] + prod_0p002175440181160;
            delay[220] <= delay[221] + prod_0p002101963600273;
            delay[221] <= delay[222] + prod_0p001979811199855;
            delay[222] <= delay[223] + prod_0p001809551714876;
            delay[223] <= delay[224] + prod_0p001594324038229;
            delay[224] <= delay[225] + prod_0p001337907401144;
            delay[225] <= delay[226] + prod_0p001044986969926;
            delay[226] <= delay[227] + prod_0p000720936790405;
            delay[227] <= delay[228] + prod_0p000372663219595;
            delay[228] <= delay[229] + prod_0p000007001844772;
            delay[229] <= delay[230] - prod_0p000368882744022;
            delay[230] <= delay[231] - prod_0p000746778118645;
            delay[231] <= delay[232] - prod_0p001117449265058;
            delay[232] <= delay[233] - prod_0p001472420714525;
            delay[233] <= delay[234] - prod_0p001803862365738;
            delay[234] <= delay[235] - prod_0p002103735783255;
            delay[235] <= delay[236] - prod_0p002364113902335;
            delay[236] <= delay[237] - prod_0p002578322327590;
            delay[237] <= delay[238] - prod_0p002740811241672;
            delay[238] <= delay[239] - prod_0p002846303958176;
            delay[239] <= delay[240] - prod_0p002890614994053;
            delay[240] <= delay[241] - prod_0p002871497292782;
            delay[241] <= delay[242] - prod_0p002787952256151;
            delay[242] <= delay[243] - prod_0p002639892046411;
            delay[243] <= delay[244] - prod_0p002428269823898;
            delay[244] <= delay[245] - prod_0p002156085890105;
            delay[245] <= delay[246] - prod_0p001827558953831;
            delay[246] <= delay[247] - prod_0p001449300037894;
            delay[247] <= delay[248] - prod_0p001027386341700;
            delay[248] <= delay[249] - prod_0p000570625036045;
            delay[249] <= delay[250] - prod_0p000086962818785;
            delay[250] <= delay[251] + prod_0p000411954263558;
            delay[251] <= delay[252] + prod_0p000917272484268;
            delay[252] <= delay[253] + prod_0p001416954155502;
            delay[253] <= delay[254] + prod_0p001899777694938;
            delay[254] <= delay[255] + prod_0p002354984692705;
            delay[255] <= delay[256] + prod_0p002770428314490;
            delay[256] <= delay[257] + prod_0p003137070223319;
            delay[257] <= delay[258] + prod_0p003445273826937;
            delay[258] <= delay[259] + prod_0p003685379144415;
            delay[259] <= delay[260] + prod_0p003850764675840;
            delay[260] <= delay[261] + prod_0p003935070187112;
            delay[261] <= delay[262] + prod_0p003933736529200;
            delay[262] <= delay[263] + prod_0p003844919574787;
            delay[263] <= delay[264] + prod_0p003666797847893;
            delay[264] <= delay[265] + prod_0p003400400862952;
            delay[265] <= delay[266] + prod_0p003049560226168;
            delay[266] <= delay[267] + prod_0p002618057264245;
            delay[267] <= delay[268] + prod_0p002112681056194;
            delay[268] <= delay[269] + prod_0p001542382737727;
            delay[269] <= delay[270] + prod_0p000917173150631;
            delay[270] <= delay[271] + prod_0p000249167461179;
            delay[271] <= delay[272] - prod_0p000448290544196;
            delay[272] <= delay[273] - prod_0p001160615730861;
            delay[273] <= delay[274] - prod_0p001873721622746;
            delay[274] <= delay[275] - prod_0p002571438364894;
            delay[275] <= delay[276] - prod_0p003237763645681;
            delay[276] <= delay[277] - prod_0p003856759618712;
            delay[277] <= delay[278] - prod_0p004413280766291;
            delay[278] <= delay[279] - prod_0p004892449363129;
            delay[279] <= delay[280] - prod_0p005280931661260;
            delay[280] <= delay[281] - prod_0p005566738520437;
            delay[281] <= delay[282] - prod_0p005739372782409;
            delay[282] <= delay[283] - prod_0p005790170882407;
            delay[283] <= delay[284] - prod_0p005713131084910;
            delay[284] <= delay[285] - prod_0p005504612562743;
            delay[285] <= delay[286] - prod_0p005163120251677;
            delay[286] <= delay[287] - prod_0p004690032646217;
            delay[287] <= delay[288] - prod_0p004089870640222;
            delay[288] <= delay[289] - prod_0p003369793618121;
            delay[289] <= delay[290] - prod_0p002539390347445;
            delay[290] <= delay[291] - prod_0p001611322305837;
            delay[291] <= delay[292] - prod_0p000601247638630;
            delay[292] <= delay[293] + prod_0p000473563918050;
            delay[293] <= delay[294] + prod_0p001593657321957;
            delay[294] <= delay[295] + prod_0p002737177080669;
            delay[295] <= delay[296] + prod_0p003880036695260;
            delay[296] <= delay[297] + prod_0p004998442408490;
            delay[297] <= delay[298] + prod_0p006066818206839;
            delay[298] <= delay[299] + prod_0p007060289580879;
            delay[299] <= delay[300] + prod_0p007952514757540;
            delay[300] <= delay[301] + prod_0p008719537053835;
            delay[301] <= delay[302] + prod_0p009336625351933;
            delay[302] <= delay[303] + prod_0p009782130944036;
            delay[303] <= delay[304] + prod_0p010035195664290;
            delay[304] <= delay[305] + prod_0p010076780048862;
            delay[305] <= delay[306] + prod_0p009892477101017;
            delay[306] <= delay[307] + prod_0p009469049637762;
            delay[307] <= delay[308] + prod_0p008797128063081;
            delay[308] <= delay[309] + prod_0p007871630391907;
            delay[309] <= delay[310] + prod_0p006690043389398;
            delay[310] <= delay[311] + prod_0p005255047717133;
            delay[311] <= delay[312] + prod_0p003572847464761;
            delay[312] <= delay[313] + prod_0p001652248529702;
            delay[313] <= delay[314] - prod_0p000492196465972;
            delay[314] <= delay[315] - prod_0p002842531708928;
            delay[315] <= delay[316] - prod_0p005378052997361;
            delay[316] <= delay[317] - prod_0p008073481473903;
            delay[317] <= delay[318] - prod_0p010901980979532;
            delay[318] <= delay[319] - prod_0p013833318121693;
            delay[319] <= delay[320] - prod_0p016834228536721;
            delay[320] <= delay[321] - prod_0p019871061855181;
            delay[321] <= delay[322] - prod_0p022907681087362;
            delay[322] <= delay[323] - prod_0p025907685202249;
            delay[323] <= delay[324] - prod_0p028833775742233;
            delay[324] <= delay[325] - prod_0p031650754888938;
            delay[325] <= delay[326] - prod_0p034322970686648;
            delay[326] <= delay[327] - prod_0p036816477657865;
            delay[327] <= delay[328] - prod_0p039099230128115;
            delay[328] <= delay[329] - prod_0p041141956788989;
            delay[329] <= delay[330] - prod_0p042917866233768;
            delay[330] <= delay[331] - prod_0p044403893105783;
            delay[331] <= delay[332] - prod_0p045580666550549;
            delay[332] <= delay[333] - prod_0p046432576048994;
            delay[333] <= delay[334] - prod_0p046948160834813;
            delay[334] <= delay[335] + prod_0p952879280278643;
            delay[335] <= delay[336] - prod_0p046948160834813;
            delay[336] <= delay[337] - prod_0p046432576048994;
            delay[337] <= delay[338] - prod_0p045580666550549;
            delay[338] <= delay[339] - prod_0p044403893105783;
            delay[339] <= delay[340] - prod_0p042917866233768;
            delay[340] <= delay[341] - prod_0p041141956788989;
            delay[341] <= delay[342] - prod_0p039099230128115;
            delay[342] <= delay[343] - prod_0p036816477657865;
            delay[343] <= delay[344] - prod_0p034322970686648;
            delay[344] <= delay[345] - prod_0p031650754888938;
            delay[345] <= delay[346] - prod_0p028833775742233;
            delay[346] <= delay[347] - prod_0p025907685202249;
            delay[347] <= delay[348] - prod_0p022907681087362;
            delay[348] <= delay[349] - prod_0p019871061855181;
            delay[349] <= delay[350] - prod_0p016834228536721;
            delay[350] <= delay[351] - prod_0p013833318121693;
            delay[351] <= delay[352] - prod_0p010901980979532;
            delay[352] <= delay[353] - prod_0p008073481473903;
            delay[353] <= delay[354] - prod_0p005378052997361;
            delay[354] <= delay[355] - prod_0p002842531708928;
            delay[355] <= delay[356] - prod_0p000492196465972;
            delay[356] <= delay[357] + prod_0p001652248529702;
            delay[357] <= delay[358] + prod_0p003572847464761;
            delay[358] <= delay[359] + prod_0p005255047717133;
            delay[359] <= delay[360] + prod_0p006690043389398;
            delay[360] <= delay[361] + prod_0p007871630391907;
            delay[361] <= delay[362] + prod_0p008797128063081;
            delay[362] <= delay[363] + prod_0p009469049637762;
            delay[363] <= delay[364] + prod_0p009892477101017;
            delay[364] <= delay[365] + prod_0p010076780048862;
            delay[365] <= delay[366] + prod_0p010035195664290;
            delay[366] <= delay[367] + prod_0p009782130944036;
            delay[367] <= delay[368] + prod_0p009336625351933;
            delay[368] <= delay[369] + prod_0p008719537053835;
            delay[369] <= delay[370] + prod_0p007952514757540;
            delay[370] <= delay[371] + prod_0p007060289580879;
            delay[371] <= delay[372] + prod_0p006066818206839;
            delay[372] <= delay[373] + prod_0p004998442408490;
            delay[373] <= delay[374] + prod_0p003880036695260;
            delay[374] <= delay[375] + prod_0p002737177080669;
            delay[375] <= delay[376] + prod_0p001593657321957;
            delay[376] <= delay[377] + prod_0p000473563918050;
            delay[377] <= delay[378] - prod_0p000601247638630;
            delay[378] <= delay[379] - prod_0p001611322305837;
            delay[379] <= delay[380] - prod_0p002539390347445;
            delay[380] <= delay[381] - prod_0p003369793618121;
            delay[381] <= delay[382] - prod_0p004089870640222;
            delay[382] <= delay[383] - prod_0p004690032646217;
            delay[383] <= delay[384] - prod_0p005163120251677;
            delay[384] <= delay[385] - prod_0p005504612562743;
            delay[385] <= delay[386] - prod_0p005713131084910;
            delay[386] <= delay[387] - prod_0p005790170882407;
            delay[387] <= delay[388] - prod_0p005739372782409;
            delay[388] <= delay[389] - prod_0p005566738520437;
            delay[389] <= delay[390] - prod_0p005280931661260;
            delay[390] <= delay[391] - prod_0p004892449363129;
            delay[391] <= delay[392] - prod_0p004413280766291;
            delay[392] <= delay[393] - prod_0p003856759618712;
            delay[393] <= delay[394] - prod_0p003237763645681;
            delay[394] <= delay[395] - prod_0p002571438364894;
            delay[395] <= delay[396] - prod_0p001873721622746;
            delay[396] <= delay[397] - prod_0p001160615730861;
            delay[397] <= delay[398] - prod_0p000448290544196;
            delay[398] <= delay[399] + prod_0p000249167461179;
            delay[399] <= delay[400] + prod_0p000917173150631;
            delay[400] <= delay[401] + prod_0p001542382737727;
            delay[401] <= delay[402] + prod_0p002112681056194;
            delay[402] <= delay[403] + prod_0p002618057264245;
            delay[403] <= delay[404] + prod_0p003049560226168;
            delay[404] <= delay[405] + prod_0p003400400862952;
            delay[405] <= delay[406] + prod_0p003666797847893;
            delay[406] <= delay[407] + prod_0p003844919574787;
            delay[407] <= delay[408] + prod_0p003933736529200;
            delay[408] <= delay[409] + prod_0p003935070187112;
            delay[409] <= delay[410] + prod_0p003850764675840;
            delay[410] <= delay[411] + prod_0p003685379144415;
            delay[411] <= delay[412] + prod_0p003445273826937;
            delay[412] <= delay[413] + prod_0p003137070223319;
            delay[413] <= delay[414] + prod_0p002770428314490;
            delay[414] <= delay[415] + prod_0p002354984692705;
            delay[415] <= delay[416] + prod_0p001899777694938;
            delay[416] <= delay[417] + prod_0p001416954155502;
            delay[417] <= delay[418] + prod_0p000917272484268;
            delay[418] <= delay[419] + prod_0p000411954263558;
            delay[419] <= delay[420] - prod_0p000086962818785;
            delay[420] <= delay[421] - prod_0p000570625036045;
            delay[421] <= delay[422] - prod_0p001027386341700;
            delay[422] <= delay[423] - prod_0p001449300037894;
            delay[423] <= delay[424] - prod_0p001827558953831;
            delay[424] <= delay[425] - prod_0p002156085890105;
            delay[425] <= delay[426] - prod_0p002428269823898;
            delay[426] <= delay[427] - prod_0p002639892046411;
            delay[427] <= delay[428] - prod_0p002787952256151;
            delay[428] <= delay[429] - prod_0p002871497292782;
            delay[429] <= delay[430] - prod_0p002890614994053;
            delay[430] <= delay[431] - prod_0p002846303958176;
            delay[431] <= delay[432] - prod_0p002740811241672;
            delay[432] <= delay[433] - prod_0p002578322327590;
            delay[433] <= delay[434] - prod_0p002364113902335;
            delay[434] <= delay[435] - prod_0p002103735783255;
            delay[435] <= delay[436] - prod_0p001803862365738;
            delay[436] <= delay[437] - prod_0p001472420714525;
            delay[437] <= delay[438] - prod_0p001117449265058;
            delay[438] <= delay[439] - prod_0p000746778118645;
            delay[439] <= delay[440] - prod_0p000368882744022;
            delay[440] <= delay[441] + prod_0p000007001844772;
            delay[441] <= delay[442] + prod_0p000372663219595;
            delay[442] <= delay[443] + prod_0p000720936790405;
            delay[443] <= delay[444] + prod_0p001044986969926;
            delay[444] <= delay[445] + prod_0p001337907401144;
            delay[445] <= delay[446] + prod_0p001594324038229;
            delay[446] <= delay[447] + prod_0p001809551714876;
            delay[447] <= delay[448] + prod_0p001979811199855;
            delay[448] <= delay[449] + prod_0p002101963600273;
            delay[449] <= delay[450] + prod_0p002175440181160;
            delay[450] <= delay[451] + prod_0p002199770831104;
            delay[451] <= delay[452] + prod_0p002175168552813;
            delay[452] <= delay[453] + prod_0p002103507151916;
            delay[453] <= delay[454] + prod_0p001987898865603;
            delay[454] <= delay[455] + prod_0p001831566636285;
            delay[455] <= delay[456] + prod_0p001638381515244;
            delay[456] <= delay[457] + prod_0p001414365093299;
            delay[457] <= delay[458] + prod_0p001164389963439;
            delay[458] <= delay[459] + prod_0p000893796082537;
            delay[459] <= delay[460] + prod_0p000610649036597;
            delay[460] <= delay[461] + prod_0p000321139029943;
            delay[461] <= delay[462] + prod_0p000031080014503;
            delay[462] <= delay[463] - prod_0p000251975066314;
            delay[463] <= delay[464] - prod_0p000523127142025;
            delay[464] <= delay[465] - prod_0p000777015943843;
            delay[465] <= delay[466] - prod_0p001006862218609;
            delay[466] <= delay[467] - prod_0p001209765049681;
            delay[467] <= delay[468] - prod_0p001381168029941;
            delay[468] <= delay[469] - prod_0p001517743750544;
            delay[469] <= delay[470] - prod_0p001619284984364;
            delay[470] <= delay[471] - prod_0p001681431670775;
            delay[471] <= delay[472] - prod_0p001706187280388;
            delay[472] <= delay[473] - prod_0p001692195353790;
            delay[473] <= delay[474] - prod_0p001642241407582;
            delay[474] <= delay[475] - prod_0p001556940333362;
            delay[475] <= delay[476] - prod_0p001439035403261;
            delay[476] <= delay[477] - prod_0p001291330025415;
            delay[477] <= delay[478] - prod_0p001118577493783;
            delay[478] <= delay[479] - prod_0p000925419102546;
            delay[479] <= delay[480] - prod_0p000716372841401;
            delay[480] <= delay[481] - prod_0p000496245017214;
            delay[481] <= delay[482] - prod_0p000270460824857;
            delay[482] <= delay[483] - prod_0p000044288172742;
            delay[483] <= delay[484] + prod_0p000177649657508;
            delay[484] <= delay[485] + prod_0p000390942745603;
            delay[485] <= delay[486] + prod_0p000591012514049;
            delay[486] <= delay[487] + prod_0p000773177826181;
            delay[487] <= delay[488] + prod_0p000933715488556;
            delay[488] <= delay[489] + prod_0p001070376741302;
            delay[489] <= delay[490] + prod_0p001181021453257;
            delay[490] <= delay[491] + prod_0p001263232728687;
            delay[491] <= delay[492] + prod_0p001315301014142;
            delay[492] <= delay[493] + prod_0p001337262753940;
            delay[493] <= delay[494] + prod_0p001329292244818;
            delay[494] <= delay[495] + prod_0p001291460944742;
            delay[495] <= delay[496] + prod_0p001224992952329;
            delay[496] <= delay[497] + prod_0p001133364014002;
            delay[497] <= delay[498] + prod_0p001019515232348;
            delay[498] <= delay[499] + prod_0p000885778977877;
            delay[499] <= delay[500] + prod_0p000734969021613;
            delay[500] <= delay[501] + prod_0p000571717728426;
            delay[501] <= delay[502] + prod_0p000399770088819;
            delay[502] <= delay[503] + prod_0p000222167191164;
            delay[503] <= delay[504] + prod_0p000043611672557;
            delay[504] <= delay[505] - prod_0p000131186631082;
            delay[505] <= delay[506] - prod_0p000299385224793;
            delay[506] <= delay[507] - prod_0p000458468120234;
            delay[507] <= delay[508] - prod_0p000603729341322;
            delay[508] <= delay[509] - prod_0p000732018995810;
            delay[509] <= delay[510] - prod_0p000842026186571;
            delay[510] <= delay[511] - prod_0p000929812611981;
            delay[511] <= delay[512] - prod_0p000993790868210;
            delay[512] <= delay[513] - prod_0p001035722549540;
            delay[513] <= delay[514] - prod_0p001053522469621;
            delay[514] <= delay[515] - prod_0p001046876942412;
            delay[515] <= delay[516] - prod_0p001018750148792;
            delay[516] <= delay[517] - prod_0p000967277173120;
            delay[517] <= delay[518] - prod_0p000895347907654;
            delay[518] <= delay[519] - prod_0p000806886523648;
            delay[519] <= delay[520] - prod_0p000700324503472;
            delay[520] <= delay[521] - prod_0p000582952941516;
            delay[521] <= delay[522] - prod_0p000452437109362;
            delay[522] <= delay[523] - prod_0p000315407463963;
            delay[523] <= delay[524] - prod_0p000173425118704;
            delay[524] <= delay[525] - prod_0p000031631782474;
            delay[525] <= delay[526] + prod_0p000107443809606;
            delay[526] <= delay[527] + prod_0p000240602970550;
            delay[527] <= delay[528] + prod_0p000365722988386;
            delay[528] <= delay[529] + prod_0p000480114418238;
            delay[529] <= delay[530] + prod_0p000581124967296;
            delay[530] <= delay[531] + prod_0p000666682697453;
            delay[531] <= delay[532] + prod_0p000735652495995;
            delay[532] <= delay[533] + prod_0p000787475573779;
            delay[533] <= delay[534] + prod_0p000821300911915;
            delay[534] <= delay[535] + prod_0p000835879311207;
            delay[535] <= delay[536] + prod_0p000830477253542;
            delay[536] <= delay[537] + prod_0p000806032995820;
            delay[537] <= delay[538] + prod_0p000764505858335;
            delay[538] <= delay[539] + prod_0p000707198666647;
            delay[539] <= delay[540] + prod_0p000635048952155;
            delay[540] <= delay[541] + prod_0p000549708924911;
            delay[541] <= delay[542] + prod_0p000454313334118;
            delay[542] <= delay[543] + prod_0p000351928673573;
            delay[543] <= delay[544] + prod_0p000244360024508;
            delay[544] <= delay[545] + prod_0p000132578335336;
            delay[545] <= delay[546] + prod_0p000019081271535;
            delay[546] <= delay[547] - prod_0p000092337570728;
            delay[547] <= delay[548] - prod_0p000198566154554;
            delay[548] <= delay[549] - prod_0p000298650041500;
            delay[549] <= delay[550] - prod_0p000390681464090;
            delay[550] <= delay[551] - prod_0p000471134423591;
            delay[551] <= delay[552] - prod_0p000537746317635;
            delay[552] <= delay[553] - prod_0p000591322226063;
            delay[553] <= delay[554] - prod_0p000632374068889;
            delay[554] <= delay[555] - prod_0p000658271299037;
            delay[555] <= delay[556] - prod_0p000667866668977;
            delay[556] <= delay[557] - prod_0p000663278281370;
            delay[557] <= delay[558] - prod_0p000645098759781;
            delay[558] <= delay[559] - prod_0p000610825493074;
            delay[559] <= delay[560] - prod_0p000561667197245;
            delay[560] <= delay[561] - prod_0p000502812585862;
            delay[561] <= delay[562] - prod_0p000434043351066;
            delay[562] <= delay[563] - prod_0p000354867503494;
            delay[563] <= delay[564] - prod_0p000272002076543;
            delay[564] <= delay[565] - prod_0p000185949731817;
            delay[565] <= delay[566] - prod_0p000093543980808;
            delay[566] <= delay[567] - prod_0p000002890481197;
            delay[567] <= delay[568] + prod_0p000086409746424;
            delay[568] <= delay[569] + prod_0p000176622219239;
            delay[569] <= delay[570] + prod_0p000254860497985;
            delay[570] <= delay[571] + prod_0p000330917446534;
            delay[571] <= delay[572] + prod_0p000393004899282;
            delay[572] <= delay[573] + prod_0p000447656688014;
            delay[573] <= delay[574] + prod_0p000490443208993;
            delay[574] <= delay[575] + prod_0p000522974597703;
            delay[575] <= delay[576] + prod_0p000543631315911;
            delay[576] <= delay[577] + prod_0p000551824009197;
            delay[577] <= delay[578] + prod_0p000546377345845;
            delay[578] <= delay[579] + prod_0p000527552682583;
            delay[579] <= delay[580] + prod_0p000496663763067;
            delay[580] <= delay[581] + prod_0p000455545509093;
            delay[581] <= delay[582] + prod_0p000405932178706;
            delay[582] <= delay[583] + prod_0p000348713352137;
            delay[583] <= delay[584] + prod_0p000284114844126;
            delay[584] <= delay[585] + prod_0p000212519156837;
            delay[585] <= delay[586] + prod_0p000135582805604;
            delay[586] <= delay[587] + prod_0p000056301935159;
            delay[587] <= delay[588] - prod_0p000022120509649;
            delay[588] <= delay[589] - prod_0p000097509344623;
            delay[589] <= delay[590] - prod_0p000169541178580;
            delay[590] <= delay[591] - prod_0p000238278080506;
            delay[591] <= delay[592] - prod_0p000302753253499;
            delay[592] <= delay[593] - prod_0p000360252537365;
            delay[593] <= delay[594] - prod_0p000407557471672;
            delay[594] <= delay[595] - prod_0p000442871930003;
            delay[595] <= delay[596] - prod_0p000467123738818;
            delay[596] <= delay[597] - prod_0p000482267481818;
            delay[597] <= delay[598] - prod_0p000488511454582;
            delay[598] <= delay[599] - prod_0p000483068757652;
            delay[599] <= delay[600] - prod_0p000463493825448;
            delay[600] <= delay[601] - prod_0p000431003309979;
            delay[601] <= delay[602] - prod_0p000389998261604;
            delay[602] <= delay[603] - prod_0p000343368526417;
            delay[603] <= delay[604] - prod_0p000288914792923;
            delay[604] <= delay[605] - prod_0p000223580958635;
            delay[605] <= delay[606] - prod_0p000149939910081;
            delay[606] <= delay[607] - prod_0p000075698403024;
            delay[607] <= delay[608] - prod_0p000003777403829;
            delay[608] <= delay[609] + prod_0p000071121375746;
            delay[609] <= delay[610] + prod_0p000150723470046;
            delay[610] <= delay[611] + prod_0p000225446430378;
            delay[611] <= delay[612] + prod_0p000287745081791;
            delay[612] <= delay[613] + prod_0p000345878176474;
            delay[613] <= delay[614] + prod_0p000404963603142;
            delay[614] <= delay[615] + prod_0p000448351097771;
            delay[615] <= delay[616] + prod_0p000471940394081;
            delay[616] <= delay[617] + prod_0p000497383335527;
            delay[617] <= delay[618] + prod_0p000509565672488;
            delay[618] <= delay[619] + prod_0p000490267233623;
            delay[619] <= delay[620] + prod_0p000484676446652;
            delay[620] <= delay[621] + prod_0p000441431072757;
            delay[621] <= delay[622] + prod_0p000400632321268;
            delay[622] <= delay[623] + prod_0p000339972864915;
            delay[623] <= delay[624] + prod_0p000270905109505;
            delay[624] <= delay[625] + prod_0p000191216402380;
            delay[625] <= delay[626] + prod_0p000103843508644;
            delay[626] <= delay[627] + prod_0p000010592272627;
            delay[627] <= delay[628] - prod_0p000086004256734;
            delay[628] <= delay[629] - prod_0p000183521462318;
            delay[629] <= delay[630] - prod_0p000279049452148;
            delay[630] <= delay[631] - prod_0p000369468822649;
            delay[631] <= delay[632] - prod_0p000451852218996;
            delay[632] <= delay[633] - prod_0p000523059259547;
            delay[633] <= delay[634] - prod_0p000580010028728;
            delay[634] <= delay[635] - prod_0p000619885239071;
            delay[635] <= delay[636] - prod_0p000640204530451;
            delay[636] <= delay[637] - prod_0p000638804573678;
            delay[637] <= delay[638] - prod_0p000613888781739;
            delay[638] <= delay[639] - prod_0p000564537970177;
            delay[639] <= delay[640] - prod_0p000490421733888;
            delay[640] <= delay[641] - prod_0p000392189099473;
            delay[641] <= delay[642] - prod_0p000271403671133;
            delay[642] <= delay[643] - prod_0p000130751933239;
            delay[643] <= delay[644] + prod_0p000025887526338;
            delay[644] <= delay[645] + prod_0p000193448104945;
            delay[645] <= delay[646] + prod_0p000365686831791;
            delay[646] <= delay[647] + prod_0p000535083400629;
            delay[647] <= delay[648] + prod_0p000693074460695;
            delay[648] <= delay[649] + prod_0p000830187477825;
            delay[649] <= delay[650] + prod_0p000936378377169;
            delay[650] <= delay[651] + prod_0p001001118040788;
            delay[651] <= delay[652] + prod_0p001013951113230;
            delay[652] <= delay[653] + prod_0p000965537970318;
            delay[653] <= delay[654] + prod_0p000847932573919;
            delay[654] <= delay[655] + prod_0p000655794674816;
            delay[655] <= delay[656] + prod_0p000387502172574;
            delay[656] <= delay[657] + prod_0p000046927875400;
            delay[657] <= delay[658] - prod_0p000355031916952;
            delay[658] <= delay[659] - prod_0p000798395308804;
            delay[659] <= delay[660] - prod_0p001251350199643;
            delay[660] <= delay[661] - prod_0p001667739984795;
            delay[661] <= delay[662] - prod_0p001983139125333;
            delay[662] <= delay[663] - prod_0p002110906309105;
            delay[663] <= delay[664] - prod_0p001938034372603;
            delay[664] <= delay[665] - prod_0p001319160405792;
            delay[665] <= delay[666] - prod_0p000070661049161;
            delay[666] <= delay[667] + prod_0p002036304972377;
            delay[667] <= delay[668] + prod_0p005284442531356;
            delay[668] <= delay[669] + prod_0p010019109120374;
            delay[669] <=  - prod_0p010637157984332;
        end
    end

endmodule


